(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{975:function(t,_,s){"use strict";s.r(_);var a=s(22),v=Object(a.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("这个专栏总会以一道 Go 语言的面试题开始，针对它进行解答，我会告诉你为什么我要关注这道题，这道题的背后隐藏着哪些知识，并且，我会对这部分的内容，进行相关的知识扩展。")]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("a",{attrs:{href:"https://time.geekbang.org/column/intro/100013101",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 语言核心 36 讲 | 极客时间"),s("OutboundLink")],1),t._v(" 第 01-06 讲")])]),t._v(" "),s("h2",{attrs:{id:"_1-工作区和-gopath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作区和-gopath"}},[t._v("#")]),t._v(" 1. 工作区和 GOPATH")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("Question")]),t._v(" "),s("p",[t._v("问：你知道设置 GOPATH 有什么意义吗？")])]),t._v(" "),s("p",[t._v("在配置 golang 的环境中，需要配置 3 个环境变量：")]),t._v(" "),s("ul",[s("li",[t._v("GOROOT：Go 语言安装根目录的路径，也就是 GO 语言的安装路径。")]),t._v(" "),s("li",[t._v("GOPATH：若干工作区目录的路径。是我们自己定义的工作空间。")]),t._v(" "),s("li",[t._v("GOBIN：GO 程序生成的可执行文件（executable file）的路径。")])]),t._v(" "),s("p",[t._v("其中，GOPATH 背后的概念是最多的，也是最重要的。")]),t._v(" "),s("p",[s("strong",[t._v("你可以把 GOPATH 简单理解成 Go 语言的工作目录，它的值是一个目录的路径，也可以是多个目录路径，每个目录都代表 Go 语言的一个工作区")]),t._v("（workspace）。你可以把 GOPATH 简单理解成 Go 语言的工作目录，它的值是一个目录的路径，也可以是多个目录路径，每个目录都代表 Go 语言的一个工作区（workspace）。")]),t._v(" "),s("p",[t._v("事实上，由于 Go 语言项目在其生命周期内的所有操作（编码、依赖管理、构建、测试、安装等）基本上都是围绕着 GOPATH 和工作区进行的。所以，它的背后至少有 3 个知识点，分别是：")]),t._v(" "),s("ol",[s("li",[t._v("Go 语言源码的组织方式是怎样的；")]),t._v(" "),s("li",[t._v("你是否了解源码安装后的结果（只有在安装后，Go 语言源码才能被我们或其他代码使用）；")]),t._v(" "),s("li",[t._v("你是否理解构建和安装 Go 程序的过程（这在开发程序以及查找程序问题的时候都很有用，否则你很可能会走弯路）。")])]),t._v(" "),s("p",[t._v("下面我就重点来聊一聊这些内容。")]),t._v(" "),s("h3",{attrs:{id:"_1-1-go-语言源码的组织方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-go-语言源码的组织方式"}},[t._v("#")]),t._v(" 1.1 Go 语言源码的组织方式")]),t._v(" "),s("p",[t._v("与许多编程语言一样，Go 语言的源码也是"),s("strong",[t._v("以代码包为基本组织单位的")]),t._v("。在文件系统中，这些代码包其实是与目录一一对应的。由于目录可以有子目录，所以代码包也可以有子包。")]),t._v(" "),s("p",[t._v("一个代码包中可以包含任意个以.go 为扩展名的源码文件，这些源码文件都需要被声明属于同一个代码包。代码包的名称一般会与源码文件所在的目录同名。如果不同名，那么在构建、安装的过程中会以代码包名称为准。")]),t._v(" "),s("p",[t._v("每个代码包都会有"),s("strong",[t._v("导入路径")]),t._v("。代码包的导入路径是其他代码在使用该包中的程序实体时，需要引入的路径。在实际使用程序实体之前，我们必须先导入其所在的代码包。具体的方式就是 import 该代码包的导入路径。就像这样：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/labstack/echo"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("在工作区中，一个代码包的导入路径实际上就是从 src 子目录，到该包的实际存储位置的相对路径")]),t._v("。")]),t._v(" "),s("p",[t._v("所以说，Go 语言源码的组织方式就是以环境变量 GOPATH、工作区、src 目录和代码包为主线的。一般情况下，Go 语言的源码文件都需要被存放在环境变量 GOPATH 包含的某个工作区（目录）中的 src 目录下的某个代码包（目录）中。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-了解源码安装后的结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-了解源码安装后的结果"}},[t._v("#")]),t._v(" 1.2 了解源码安装后的结果")]),t._v(" "),s("p",[t._v("了解了 Go 语言源码的组织方式后，我们很有必要知道 Go 语言源码在安装后会产生怎样的结果。")]),t._v(" "),s("p",[t._v("我们都知道：")]),t._v(" "),s("ul",[s("li",[t._v("源码文件通常会被放在某个工作区的 "),s("strong",[t._v("src 子目录")]),t._v("下。")]),t._v(" "),s("li",[t._v("那么在安装后如果产生了归档文件（以“.a”为扩展名的文件），就会放进该工作区的 "),s("strong",[t._v("pkg 子目录")]),t._v("。")]),t._v(" "),s("li",[t._v("如果产生了可执行文件，就可能会放进该工作区的 "),s("strong",[t._v("bin 子目录")]),t._v("。")])]),t._v(" "),s("p",[t._v("我再讲一下归档文件存放的具体位置和规则。")]),t._v(" "),s("p",[t._v("源码文件会以代码包的形式组织起来，一个代码包其实就对应一个目录。安装某个代码包而产生的归档文件是与这个代码包同名的。放置它的相对目录就是该代码包的导入路径的直接父级。比如，一个已存在的代码包的导入路径是：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("labstack"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("echo，\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("那么执行命令就是：")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("go "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" github.com/labstack/echo\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("生成的归档文件的相对目录就是 "),s("code",[t._v("github.com/labstack")]),t._v("， 文件名为 "),s("code",[t._v("echo.a")]),t._v("。")]),t._v(" "),s("p",[t._v("顺便说一下，上面这个代码包导入路径还有另外一层含义，那就是：该代码包的源码文件存在于 GitHub 网站的 labstack 组的代码仓库 echo 中。")]),t._v(" "),s("p",[t._v("再说回来，归档文件的相对目录与 pkg 目录之间还有一级目录，叫做平台相关目录。平台相关目录的名称是由 build（也称“构建”）的目标操作系统、下划线和目标计算架构的代号组成的。比如，构建某个代码包时的目标操作系统是 Linux，目标计算架构是 64 位的，那么对应的平台相关目录就是 linux_amd64。因此，上述代码包的归档文件就会被放置在当前工作区的子目录 pkg/linux_amd64/github.com/labstack 中。")]),t._v(" "),s("center",[s("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230603140645.png",alt:"20230603140645"}})]),t._v(" "),s("center",[s("font",{attrs:{color:"grey"}},[t._v("GOPATH 与工作区")])],1),t._v(" "),s("p",[t._v("总之，你需要记住的是，某个工作区的 src 子目录下的源码文件在安装后一般会被放置到当前工作区的 pkg 子目录下对应的目录中，或者被直接放置到该工作区的 bin 子目录中。")]),t._v(" "),s("h3",{attrs:{id:"_1-3-理解构建和安装-go-程序的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-理解构建和安装-go-程序的过程"}},[t._v("#")]),t._v(" 1.3 理解构建和安装 Go 程序的过程")]),t._v(" "),s("p",[t._v("我们再来说说构建和安装 Go 程序的过程都是怎样的，以及它们的异同点。")]),t._v(" "),s("p",[t._v("构建使用命令go build，安装使用命令go install。构建和安装代码包的时候都会执行编译、打包等操作，并且，这些操作生成的任何文件都会先被保存到某个临时的目录中。")]),t._v(" "),s("ul",[s("li",[t._v("如果构建的是库源码文件，那么操作后产生的结果文件只会存在于临时目录中。这里的构建的主要意义在于检查和验证。")]),t._v(" "),s("li",[t._v("如果构建的是命令源码文件，那么操作的结果文件会被搬运到源码文件所在的目录中。")])]),t._v(" "),s("p",[t._v("安装操作会先执行构建，然后还会进行链接操作，并且把结果文件搬运到指定目录。")]),t._v(" "),s("ul",[s("li",[t._v("如果安装的是库源码文件，那么结果文件会被搬运到它所在工作区的 pkg 目录下的某个子目录中。")]),t._v(" "),s("li",[t._v("如果安装的是命令源码文件，那么结果文件会被搬运到它所在工作区的 bin 目录中，或者环境变量GOBIN指向的目录中。")])]),t._v(" "),s("p",[t._v("这里你需要记住的是，构建和安装的不同之处，以及执行相应命令后得到的结果文件都会出现在哪里。")]),t._v(" "),s("h3",{attrs:{id:"_1-4-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-总结"}},[t._v("#")]),t._v(" 1.4 总结")]),t._v(" "),s("p",[t._v("Go 语言提供的很多工具都是在 GOPATH 和工作区的基础上运行的，比如上面提到的go build、go install和go get，这三个命令也是我们最常用到的。")]),t._v(" "),s("h2",{attrs:{id:"_2-命令源码文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令源码文件"}},[t._v("#")]),t._v(" 2. 命令源码文件")])],1)}),[],!1,null,null,null);_.default=v.exports}}]);