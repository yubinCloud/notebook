(window.webpackJsonp=window.webpackJsonp||[]).push([[329],{1100:function(s,t,a){"use strict";a.r(t);var e=a(22),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-初识-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-初识-docker"}},[s._v("#")]),s._v(" 1. 初识 Docker")]),s._v(" "),a("p",[s._v("Docker 是一个开源的应用容器引擎，基于 Go 语言实现，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上。")]),s._v(" "),a("ul",[a("li",[s._v("容器是完全使用沙箱机制，相互隔离")]),s._v(" "),a("li",[s._v("容器性能开销极低")])]),s._v(" "),a("p",[s._v("我们基于 CentOS 7 来学习 Docker。")]),s._v(" "),a("p",[s._v("Docker 的架构：")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220322153926908.png",alt:"image-20220322153926908"}}),s._v(" "),a("ul",[a("li",[a("strong",[s._v("镜像")]),s._v("（"),a("strong",[s._v("Image")]),s._v("）：就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。")]),s._v(" "),a("li",[a("strong",[s._v("容器")]),s._v("（"),a("strong",[s._v("Container")]),s._v("）："),a("u",[s._v("镜像和容器的关系，就像是面向对象程序设计中的类和对象一样")]),s._v("，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),s._v(" "),a("li",[a("strong",[s._v("仓库")]),s._v("（"),a("strong",[s._v("Repository")]),s._v("）：仓库可看成一个代码控制中心，用来保存镜像。")])]),s._v(" "),a("p",[s._v("我们在使用时，一般都会配置国内的镜像加速器。")]),s._v(" "),a("h2",{attrs:{id:"_2-docker-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker-命令"}},[s._v("#")]),s._v(" 2. Docker 命令")]),s._v(" "),a("h3",{attrs:{id:"_2-1-docker-服务相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-docker-服务相关命令"}},[s._v("#")]),s._v(" 2.1 Docker 服务相关命令")]),s._v(" "),a("ul",[a("li",[s._v("启动 docker 服务："),a("code",[s._v("systemctl start docker")])]),s._v(" "),a("li",[s._v("设置开机启动 docker 服务："),a("code",[s._v("systemctl enable docker")])]),s._v(" "),a("li",[s._v("停止 docker 服务："),a("code",[s._v("systemctl stop docker")])]),s._v(" "),a("li",[s._v("重启 docker 服务："),a("code",[s._v("systemctl restart docker")])]),s._v(" "),a("li",[s._v("查看 docker 服务状态："),a("code",[s._v("systemctl status docker")])])]),s._v(" "),a("h3",{attrs:{id:"_2-2-docker-镜像相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker-镜像相关命令"}},[s._v("#")]),s._v(" 2.2 Docker 镜像相关命令")]),s._v(" "),a("ul",[a("li",[s._v("查看镜像：查看本地所有的镜像")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" images\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" images -q  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所用镜像的 id")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("搜索镜像：从网络中查找需要的镜像")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" search 镜像名称\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("拉取镜像：从 Docker 仓库下载镜像到本地，镜像名称格式为 "),a("code",[s._v("名称:版本号")]),s._v("，如果版本号不指定则是最新的版本（latest）。 如果不知道镜像版本，可以去 docker hub 搜索对应镜像查看")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" pull 镜像名称\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("删除镜像：删除本地镜像")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" rmi 镜像id "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除指定本地镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" rmi "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" images -q"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有本地镜像")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("rmi：rm images")]),s._v(" "),a("li",[s._v("删除所有本地镜像的命令，是把 "),a("code",[s._v("docker images -q")]),s._v(" 的执行结果传给 "),a("code",[s._v("docker rmi")]),s._v(" 从而实现全部删除")])]),s._v(" "),a("h3",{attrs:{id:"_2-3-docker-容器相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-docker-容器相关命令"}},[s._v("#")]),s._v(" 2.3 Docker 容器相关命令")]),s._v(" "),a("ul",[a("li",[s._v("查看容器")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看正在运行的容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" –a "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有容器（包括历史上的）")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("创建并启动容器")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run 参数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("blockquote",[a("p",[s._v("参数说明：")]),s._v(" "),a("ul",[a("li",[s._v("-i：保持容器运行。通常与 -t 同时使用。加入 -it 这两个参数后，容器创建后自动进入容器中，"),a("strong",[s._v("退出容器后，容器自动关闭")]),s._v("。")]),s._v(" "),a("li",[s._v("-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。")]),s._v(" "),a("li",[s._v("-d：以"),a("strong",[s._v("守护（后台）模式")]),s._v("运行容器。创建一个容器在后台运行，需要使用 "),a("code",[s._v("docker exec")]),s._v(" 进入容器。"),a("strong",[s._v("退出后，容器不会关闭")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("-it")]),s._v(" 创建的容器一般称为交互式容器，"),a("code",[s._v("-id")]),s._v(" 创建的容器一般称为守护式容器")]),s._v(" "),a("li",[s._v("--name：为创建的容器命名。")])])]),s._v(" "),a("ul",[a("li",[s._v("进入容器")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" 参数  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退出容器，容器不会关闭")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("停止容器："),a("code",[s._v("docker stop 容器名称")])]),s._v(" "),a("li",[s._v("启动容器："),a("code",[s._v("docker start 容器名称")])]),s._v(" "),a("li",[s._v("删除容器："),a("code",[s._v("docker rm 容器名称")]),s._v(" "),a("ul",[a("li",[s._v("如果容器是运行状态则删除失败，需要"),a("strong",[s._v("停止容器后才能删除")])])])]),s._v(" "),a("li",[s._v("查看容器信息："),a("code",[s._v("docker inspect 容器名称")])])]),s._v(" "),a("h2",{attrs:{id:"_3-docker-容器的数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker-容器的数据卷"}},[s._v("#")]),s._v(" 3. Docker 容器的数据卷")]),s._v(" "),a("h3",{attrs:{id:"_3-1-数据卷的概念及作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数据卷的概念及作用"}},[s._v("#")]),s._v(" 3.1 数据卷的概念及作用")]),s._v(" "),a("blockquote",[a("p",[s._v("思考：")]),s._v(" "),a("ul",[a("li",[s._v("Docker 容器删除后，在容器中产生的数据还在吗？")])]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220322161149691.png",alt:"image-20220322161149691"}}),s._v(" "),a("ul",[a("li",[s._v("Docker 容器和外部机器可以直接交换文件吗？")])]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220322161209577.png",alt:"image-20220322161209577"}}),s._v(" "),a("ul",[a("li",[s._v("容器之间想要进行数据交互？")])])]),s._v(" "),a("p",[a("strong",[s._v("数据卷")]),s._v("：数据卷是"),a("u",[s._v("宿主机中的一个目录或文件")]),s._v("，当容器目录和数据卷目录绑定后，对方的修改会立即同步。一个数据卷可以被多个容器同时挂载，一个容器也可以被挂载多个数据卷。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220322161405138.png",alt:"image-20220322161405138"}}),s._v(" "),a("p",[s._v("数据卷"),a("strong",[s._v("作用")]),s._v("：容器数据持久化；外部机器和容器间接通信；容器之间数据交换")]),s._v(" "),a("h3",{attrs:{id:"_3-2-配置数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-配置数据卷"}},[s._v("#")]),s._v(" 3.2 配置数据卷")]),s._v(" "),a("p",[s._v("创建启动容器时，使用 "),a("code",[s._v("-v")]),s._v(" 参数来设置数据卷：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". -v 宿主机目录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":容器内目录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意事项")]),s._v(" "),a("ol",[a("li",[s._v("目录必须是绝对路径")]),s._v(" "),a("li",[s._v("如果目录不存在，会自动创建")]),s._v(" "),a("li",[s._v("可以挂载多个数据卷")])])]),s._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220322161748955.png",alt:"image-20220322161748955"}}),s._v(" "),a("blockquote",[a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -it --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c1 -v /root/data:/root/data_container centos:7 /bin/bash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("这条命令启动了一个 Centos 7 的容器，并将宿主机的 "),a("code",[s._v("/root/data")]),s._v(" 挂载到了容器的 "),a("code",[s._v("/root/data_container")])]),s._v(" "),a("li",[a("code",[s._v("/bin/bash")]),s._v(" 可以省略不写")])])]),s._v(" "),a("h3",{attrs:{id:"_3-3-数据卷容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-数据卷容器"}},[s._v("#")]),s._v(" 3.3 数据卷容器")]),s._v(" "),a("p",[s._v("多容器进行数据交换的方式：")]),s._v(" "),a("ul",[a("li",[s._v("方式 1：多个容器挂载同一数据卷")]),s._v(" "),a("li",[s._v("方式 2："),a("strong",[s._v("数据卷容器")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220322162607595.png",alt:"image-20220322162607595"}})]),s._v(" "),a("ul",[a("li",[s._v("c3 作为数据卷容器挂载到一个数据卷上，c1、c2 再分别挂载到 c3 上，完成这个操作后，就相当于 c1、c2 也挂载到了这个数据卷上了。这是 c1、c2、c3 都挂载到了同一个数据卷上，之后即便 c3 挂掉了，c1、c2 也能通过这个数据卷进行通信")])]),s._v(" "),a("h4",{attrs:{id:"配置数据卷容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置数据卷容器"}},[s._v("#")]),s._v(" 配置数据卷容器：")]),s._v(" "),a("ol",[a("li",[s._v("创建启动 c3 数据卷容器，使用 "),a("code",[s._v("–v")]),s._v(" 参数设置数据卷")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run –it --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c3 –v /volume centos:7 /bin/bash \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("注意这里的 "),a("code",[s._v("-v /volume")]),s._v("，这里写的是容器的目录，这样写的话，Docker 会在宿主机上自动帮我们生成一个数据卷目录并挂载上，在宿主机上自动生成的目录可以通过 "),a("code",[s._v("docker inspect ...")]),s._v(" 命令查看。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("启动 c1、c2 容器，使用 "),a("code",[s._v("--volumes-from")]),s._v(" 参数设置数据卷")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run –it --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c1 --volumes-from c3 centos:7 /bin/bash\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run –it --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c2 --volumes-from c3 centos:7 /bin/bash \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("这时 c1、c2、c3 都挂载到了同一个数据卷上，并可以相互通信了")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("数据卷总结")]),s._v(" "),a("ol",[a("li",[s._v("数据卷概念：宿主机的一个目录或文件")]),s._v(" "),a("li",[s._v("数据卷作用：容器数据持久化；客户端和容器数据交换；容器间数据交换")]),s._v(" "),a("li",[s._v("数据卷容器：\n"),a("ul",[a("li",[s._v("创建一个容器，挂载一个目录，让其他容器继承自该容器( "),a("code",[s._v("--volume-from")]),s._v(" )")]),s._v(" "),a("li",[s._v("通过简单方式实现数据卷配置")])])])])]),s._v(" "),a("h2",{attrs:{id:"_4-docker-应用部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker-应用部署"}},[s._v("#")]),s._v(" 4. Docker 应用部署")]),s._v(" "),a("h3",{attrs:{id:"_4-1-端口映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-端口映射"}},[s._v("#")]),s._v(" 4.1 端口映射")]),s._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327080653400.png",alt:"image-20220327080653400"}}),s._v(" "),a("p",[a("u",[s._v("容器内的网络服务和外部机器不能直接通信")]),s._v("，但外部机器和宿主机可以直接通信，宿主机和容器可以直接通信。")]),s._v(" "),a("p",[s._v("当容器中的网络服务需要被外部机器访问时，可以"),a("strong",[s._v("将容器中提供服务的端口映射到宿主机的端口上")]),s._v("。外部机器访问宿主机的该端口，从而间接访问容器的服务。这种操作称为："),a("strong",[s._v("端口映射")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"_4-2-mysql-部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-mysql-部署"}},[s._v("#")]),s._v(" 4.2 MySQL 部署")]),s._v(" "),a("p",[s._v("搜索 MySQL 镜像、拉取镜像、创建容器、操作容器中的 MySQL")]),s._v(" "),a("h2",{attrs:{id:"_5-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-dockerfile"}},[s._v("#")]),s._v(" 5. Dockerfile")]),s._v(" "),a("h3",{attrs:{id:"_5-1-docker-镜像原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-docker-镜像原理"}},[s._v("#")]),s._v(" 5.1 Docker 镜像原理")]),s._v(" "),a("p",[s._v("Linux文件系统由 bootfs 和 rootfs 两部分组成：")]),s._v(" "),a("ul",[a("li",[s._v("bootfs：包含bootloader（引导加载程序）和 kernel（内核）")]),s._v(" "),a("li",[s._v("rootfs： root文件系统，包含的就是典型 Linux 系统中的 /dev，/proc，/bin，/etc 等标准目录和文件")])]),s._v(" "),a("p",[s._v("不同的 Linux 发行版，"),a("strong",[s._v("bootfs 基本一样，而 rootfs 不同")]),s._v("，如 ubuntu ，centos 等。")]),s._v(" "),a("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327083741834.png",alt:"image-20220327083741834"}}),s._v(" "),a("p",[a("strong",[s._v("Docker 镜像是由特殊的文件系统叠加而成")]),s._v("，最底端是 bootfs，并"),a("strong",[s._v("使用宿主机的 bootfs")]),s._v("，第二层是 root 文件系统 rootfs，称为 "),a("strong",[s._v("base image")]),s._v("，然后再往上可以叠加其他的镜像文件。")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327084230827.png",alt:"image-20220327084230827"}}),s._v(" "),a("p",[a("strong",[s._v("统一文件系统")]),s._v("（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。")]),s._v(" "),a("p",[s._v("一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。当从一个镜像启动容器时，Docker 会"),a("strong",[s._v("在最顶层加载一个读写文件系统作为容器")]),s._v("。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("思考")]),s._v(" "),a("ol",[a("li",[s._v("Docker 镜像本质是什么？\n"),a("ul",[a("li",[s._v("是一个分层文件系统")])])]),s._v(" "),a("li",[s._v("Docker 中一个 centos 镜像为什么只有 200MB，而一个 centos 操作系统的 iso 文件要几个个 G？\n"),a("ul",[a("li",[s._v("Centos 的 iso 镜像文件包含 bootfs 和 rootfs，而 docker 的 centos 镜像复用宿主机操作系统的 bootfs，只有 rootfs 和其他镜像层。")])])]),s._v(" "),a("li",[s._v("Docker 中一个 tomcat 镜像为什么有 500MB，而一个 tomcat 安装包只有 70多 MB？\n"),a("ul",[a("li",[s._v("由于docker中镜像是分层的，tomcat 虽然只有 70 多 MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的 tomcat 镜像大小 500 多 MB。")])])])])]),s._v(" "),a("p",[s._v("Docker 镜像如何制作？")]),s._v(" "),a("ol",[a("li",[s._v("容器转为镜像【"),a("em",[s._v("不常用，了解即可")]),s._v("】")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" commit 容器id 镜像名称:版本号\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" save -o 压缩文件名称 镜像名称:版本号\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" load –i 压缩文件名称\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327085044507.png",alt:"image-20220327085044507"}}),s._v(" "),a("blockquote",[a("p",[s._v("这种方式在 commit 时产生的镜像，挂载的数据卷的数据不会进入生成的镜像中。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("Dockerfile 的方式")])]),s._v(" "),a("h3",{attrs:{id:"_5-2-dockefile-概念及作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-dockefile-概念及作用"}},[s._v("#")]),s._v(" 5.2 Dockefile 概念及作用")]),s._v(" "),a("p",[s._v("Dockerfile 是一个文本文件，包含了一条条的指令，每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像。")]),s._v(" "),a("ul",[a("li",[s._v("对于开发人员：可以为开发团队提供一个完全一致的开发环境")]),s._v(" "),a("li",[s._v("对于测试人员：可以直接拿开发时所构建的镜像或者通过 Dockerfile 文件构建一个新的镜像开始工作了")]),s._v(" "),a("li",[s._v("对于运维人员：在部署时，可以实现应用的无缝移植")])]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Hub 官网"),a("OutboundLink")],1)])]),s._v(" "),a("h3",{attrs:{id:"_5-3-dockerfile-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-dockerfile-关键字"}},[s._v("#")]),s._v(" 5.3 Dockerfile 关键字")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("关键字")]),s._v(" "),a("th",[s._v("作用")]),s._v(" "),a("th",[s._v("备注")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[s._v("FROM")])]),s._v(" "),a("td",[s._v("指定父镜像")]),s._v(" "),a("td",[s._v("指定 dockerfile 基于那个 image 构建")])]),s._v(" "),a("tr",[a("td",[s._v("MAINTAINER")]),s._v(" "),a("td",[s._v("作者信息")]),s._v(" "),a("td",[s._v("用来标明这个dockerfile谁写的")])]),s._v(" "),a("tr",[a("td",[s._v("LABEL")]),s._v(" "),a("td",[s._v("标签")]),s._v(" "),a("td",[s._v("用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("RUN")])]),s._v(" "),a("td",[s._v("执行命令")]),s._v(" "),a("td",[s._v('执行一段命令 默认是 /bin/sh 格式: RUN command 或者 RUN ["command" , "param1","param2"]')])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("CMD")])]),s._v(" "),a("td",[s._v("容器"),a("strong",[s._v("启动")]),s._v("命令")]),s._v(" "),a("td",[s._v('提供启动容器时候的默认命令和 ENTRYPOINT 配合使用.格式 CMD command param1 param2 或者 CMD ["command" , "param1","param2"]')])]),s._v(" "),a("tr",[a("td",[s._v("ENTRYPOINT")]),s._v(" "),a("td",[s._v("入口")]),s._v(" "),a("td",[s._v("一般在制作一些执行就关闭的容器中会使用")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("COPY")])]),s._v(" "),a("td",[s._v("复制文件")]),s._v(" "),a("td",[s._v("build的时候复制文件到image中")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("ADD")])]),s._v(" "),a("td",[s._v("添加文件")]),s._v(" "),a("td",[s._v("build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("ENV")])]),s._v(" "),a("td",[s._v("环境变量")]),s._v(" "),a("td",[s._v("指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value")])]),s._v(" "),a("tr",[a("td",[s._v("ARG")]),s._v(" "),a("td",[s._v("构建参数")]),s._v(" "),a("td",[s._v("构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("VOLUME")])]),s._v(" "),a("td",[s._v("定义外部可以挂载的数据卷")]),s._v(" "),a("td",[s._v('指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME ["目录"]')])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("EXPOSE")])]),s._v(" "),a("td",[s._v("暴露端口")]),s._v(" "),a("td",[s._v("定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("WORKDIR")])]),s._v(" "),a("td",[s._v("工作目录")]),s._v(" "),a("td",[s._v("指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是 "),a("code",[s._v("/")]),s._v(" 开头那么是在上一条 workdir 的路径的相对路径")])]),s._v(" "),a("tr",[a("td",[s._v("USER")]),s._v(" "),a("td",[s._v("指定执行用户")]),s._v(" "),a("td",[s._v("指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户")])]),s._v(" "),a("tr",[a("td",[s._v("HEALTHCHECK")]),s._v(" "),a("td",[s._v("健康检查")]),s._v(" "),a("td",[s._v("指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制")])]),s._v(" "),a("tr",[a("td",[s._v("ONBUILD")]),s._v(" "),a("td",[s._v("触发器")]),s._v(" "),a("td",[s._v("当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大")])]),s._v(" "),a("tr",[a("td",[s._v("STOPSIGNAL")]),s._v(" "),a("td",[s._v("发送信号量到宿主机")]),s._v(" "),a("td",[s._v("该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。")])]),s._v(" "),a("tr",[a("td",[s._v("SHELL")]),s._v(" "),a("td",[s._v("指定执行脚本的shell")]),s._v(" "),a("td",[s._v("指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell")])])])]),s._v(" "),a("h3",{attrs:{id:"_5-4-dockerfile-案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-dockerfile-案例"}},[s._v("#")]),s._v(" 5.4 Dockerfile 案例")]),s._v(" "),a("h4",{attrs:{id:"_1-案例-发布-spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-案例-发布-spring-boot"}},[s._v("#")]),s._v(" 1）案例：发布 Spring Boot")]),s._v(" "),a("p",[s._v("创建一个简单的 Spring Boot 项目，并打包成 "),a("code",[s._v("springboot.jar")]),s._v(" 文件，Dockerfile 文件实现步骤：")]),s._v(" "),a("ol",[a("li",[s._v("定义父镜像："),a("code",[s._v("FROM java:8")])]),s._v(" "),a("li",[s._v("定义作者信息："),a("code",[s._v("MAINTAINER yubin <yubin_SkyWalker@yeah.net>")])]),s._v(" "),a("li",[s._v("将 jar 包添加到容器："),a("code",[s._v("ADD springboot.jar app.jar")]),s._v(" "),a("ul",[a("li",[s._v("文件在当前目录的话就不用写绝对路径，否则写绝对路径")])])]),s._v(" "),a("li",[s._v("定义容器启动执行的命令："),a("code",[s._v("CMD java -jar app.jar")])]),s._v(" "),a("li",[s._v("通过 Dockerfile 构建镜像："),a("code",[s._v("docker build -f dockerfile路径 -t 镜像名称:版本")])])]),s._v(" "),a("h4",{attrs:{id:"_2-自定义-centos7-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义-centos7-镜像"}},[s._v("#")]),s._v(" 2）自定义 Centos7 镜像")]),s._v(" "),a("p",[s._v("自定义 Centos7 镜像。要求：")]),s._v(" "),a("ul",[a("li",[s._v("默认登录路径为 /usr")]),s._v(" "),a("li",[s._v("可以使用 vim")])]),s._v(" "),a("p",[s._v("实现步骤：")]),s._v(" "),a("ol",[a("li",[s._v("定义父镜像："),a("code",[s._v("FROM centos:7")])]),s._v(" "),a("li",[s._v("定义作者信息："),a("code",[s._v("MAINTAINER yubin <yubin_SkyWalker@yeah.net>")])]),s._v(" "),a("li",[s._v("执行安装 vim 命令："),a("code",[s._v("RUN yum install -y vim")])]),s._v(" "),a("li",[s._v("定义默认的工作目录："),a("code",[s._v("WORKDIR /usr")])]),s._v(" "),a("li",[s._v("定义容器启动执行的命令："),a("code",[s._v("CMD /bin/bash")])]),s._v(" "),a("li",[s._v("通过 Dockerfile 构建镜像："),a("code",[s._v("docker build -f dockerfile路径 -t 镜像名称:版本")])])]),s._v(" "),a("h2",{attrs:{id:"_6-服务编排-docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-服务编排-docker-compose"}},[s._v("#")]),s._v(" 6. 服务编排：Docker Compose")]),s._v(" "),a("p",[s._v("微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。")]),s._v(" "),a("p",[a("strong",[s._v("服务编排")]),s._v("：按照一定的业务规则批量管理容器")]),s._v(" "),a("p",[s._v("Docker Compose 是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。使用步骤：")]),s._v(" "),a("ol",[a("li",[s._v("利用 Dockerfile 定义运行环境镜像")]),s._v(" "),a("li",[s._v("使用 docker-compose.yml 定义组成应用的各服务")]),s._v(" "),a("li",[s._v("运行 docker-compose up 启动应用")])]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327131338746.png",alt:"image-20220327131338746"}}),s._v(" "),a("blockquote",[a("p",[s._v("Docker Compose 的安装与卸载方法，可以搜索得到")])]),s._v(" "),a("h3",{attrs:{id:"_6-1-案例-编排-nginx-spring-boot-项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-案例-编排-nginx-spring-boot-项目"}},[s._v("#")]),s._v(" 6.1 案例：编排 nginx + spring boot 项目")]),s._v(" "),a("ol",[a("li",[s._v("创建 docker-compose 目录")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" ~/docker-compose\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~/docker-compose\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("编写 docker-compose.yml 文件")])]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("nginx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token datetime number"}},[s._v("80:80")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("links")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" app\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" ./nginx/conf.d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/etc/nginx/conf.d\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" app\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("expose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8080"')]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[s._v("定义了两个容器：nginx 和 app（名称自己起）")])]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("创建 "),a("code",[s._v("./nginx/conf.d")]),s._v(" 目录")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ./nginx/conf.d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("在 "),a("code",[s._v("./nginx/conf.d")]),s._v(" 目录下编写 nginx.conf 文件：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("server {\n    listen 80;\n    access_log off;\n\n    location / {\n        proxy_pass http://app:8080;\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("在 ~/docker-compose 目录下使用 docker-compose 启动容器")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("-d")]),s._v(" 选项可以使其在后台运行")])]),s._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[s._v("测试访问："),a("code",[s._v("ip/hello")])])]),s._v(" "),a("h2",{attrs:{id:"_7-docker-私有仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-docker-私有仓库"}},[s._v("#")]),s._v(" 7. Docker 私有仓库")]),s._v(" "),a("p",[s._v("有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。")]),s._v(" "),a("p",[s._v("这里不再讲了。")]),s._v(" "),a("h2",{attrs:{id:"_8-docker-与虚拟机对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-docker-与虚拟机对比"}},[s._v("#")]),s._v(" 8. Docker 与虚拟机对比")]),s._v(" "),a("p",[s._v("容器就是将软件打包成标准化单元，以用于开发、交付和部署。")]),s._v(" "),a("ul",[a("li",[s._v("容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。")]),s._v(" "),a("li",[s._v("容器化软件在任何环境中都能够始终如一地运行。")]),s._v(" "),a("li",[s._v("容器赋予了软件独立性，使其免受外在环境差异的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。")])]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327132715302.png",alt:"image-20220327132715302"}}),s._v(" "),a("p",[s._v("Docker 容器虚拟化与传统虚拟机比较：")]),s._v(" "),a("ul",[a("li",[s._v("相同：具有相似的资源隔离和分配优势")]),s._v(" "),a("li",[s._v("不同：容器虚拟化的是操作系统，虚拟机虚拟化的是硬件。因此，传统虚拟机可以运行不同的操作系统，容器只能运行同一类型操作系统（Linux 上无法在 Docker 启动 Windows 系统）。")])]),s._v(" "),a("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220327133001099.png",alt:"image-20220327133001099"}})])}),[],!1,null,null,null);t.default=r.exports}}]);