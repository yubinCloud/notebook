(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{940:function(v,a,_){"use strict";_.r(a);var t=_(22),e=Object(t.a)({},(function(){var v=this,a=v.$createElement,_=v._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"_1-maven-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-maven-简介"}},[v._v("#")]),v._v(" 1. Maven 简介")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("Apache Maven")]),v._v(" 是一个项目管理和构建"),_("strong",[v._v("工具")]),v._v("，它基于项目对象模型("),_("strong",[v._v("POM")]),v._v(")的概念，通过一小段描述信息来管理项目的构建、报告和文档。")])]),v._v(" "),_("p",[v._v("Maven是专门用于管理和构建Java项目的工具，它的主要功能有：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("提供了一套标准化的项目结构")])]),v._v(" "),_("li",[_("p",[v._v("提供了一套标准化的构建流程（编译，测试，打包，发布……）")])]),v._v(" "),_("li",[_("p",[v._v("提供了一套依赖管理机制")])])]),v._v(" "),_("p",[_("strong",[v._v("标准化的项目结构：")])]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726153815028.png",alt:"image-20210726153815028"}}),v._v(" "),_("ul",[_("li",[v._v("所有 IDE 创建的 Maven 项目可以通用")])]),v._v(" "),_("p",[_("strong",[v._v("标准化的构建流程：")])]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726154144488.png",alt:"image-20210726154144488"}}),v._v(" "),_("p",[v._v("如上图所示我们开发了一套系统，代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而 "),_("u",[v._v("Maven 提供了一套简单的命令来完成项目构建")]),v._v("。")]),v._v(" "),_("p",[v._v("**依赖管理：**依赖管理其实就是管理你项目所依赖的第三方资源（jar包、插件）。")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726154753631.png",alt:"image-20210726154753631"}}),v._v(" "),_("p",[v._v("Maven使用标准的"),_("strong",[v._v("坐标")]),v._v("配置来管理各种依赖，"),_("u",[v._v("只需要简单的配置就可以完成依赖管理")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"_1-1-maven-模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-maven-模型"}},[v._v("#")]),v._v(" 1.1 Maven 模型")]),v._v(" "),_("ul",[_("li",[v._v("项目对象模型 (Project Object Model)")]),v._v(" "),_("li",[v._v("依赖管理模型(Dependency)")]),v._v(" "),_("li",[v._v("插件(Plugin)")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726155759621.png",alt:""}})]),v._v(" "),_("ul",[_("li",[v._v("如上图所示就是Maven的模型，而我们先看紫色框框起来的部分，他就是用来完成 "),_("code",[v._v("标准化构建流程")]),v._v(" 。如我们需要编译，Maven提供了一个编译插件供我们使用，我们需要打包，Maven就提供了一个打包插件提供我们使用等。")]),v._v(" "),_("li",[v._v("上面部分，项目对象模型就是将我们自己抽象成一个对象模型，有自己专属的坐标。")])]),v._v(" "),_("h3",{attrs:{id:"_1-2-仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-仓库"}},[v._v("#")]),v._v(" 1.2 仓库")]),v._v(" "),_("p",[v._v("我们创建Maven项目，在项目中使用坐标来指定项目的依赖，那么依赖的jar包到底存储在什么地方呢？其实依赖jar包是存储在我们的本地仓库中。而"),_("u",[v._v("项目运行时从本地仓库中拿需要的依赖 jar 包")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("仓库分类：")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("本地仓库：自己计算机上的一个目录")])]),v._v(" "),_("li",[_("p",[v._v("中央仓库：由 Maven 团队维护的全球唯一的仓库")]),v._v(" "),_("ul",[_("li",[v._v("地址： https://repo1.maven.org/maven2/")])])]),v._v(" "),_("li",[_("p",[v._v("远程仓库(私服)：一般由公司团队搭建的私有仓库")])])]),v._v(" "),_("p",[v._v("当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包，如果有，则在项目直接引用；如果没有，则去中央仓库中下载对应的jar包到本地仓库。如果还可以搭建远程仓库，将来jar包的查找顺序则变为："),_("strong",[v._v("本地仓库 --\x3e 远程仓库--\x3e 中央仓库")]),v._v("。")]),v._v(" "),_("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726162815045.png",alt:"image-20210726162815045"}}),v._v(" "),_("h2",{attrs:{id:"_2-maven-的安装与配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-maven-的安装与配置"}},[v._v("#")]),v._v(" 2. Maven 的安装与配置")]),v._v(" "),_("p",[v._v("别忘了修改成阿里的镜像源")]),v._v(" "),_("h2",{attrs:{id:"_3-maven-的基本使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-maven-的基本使用"}},[v._v("#")]),v._v(" 3. Maven 的基本使用")]),v._v(" "),_("h3",{attrs:{id:"_3-1-maven-基本命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-maven-基本命令"}},[v._v("#")]),v._v(" 3.1 Maven 基本命令")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("compile ：编译")])]),v._v(" "),_("li",[_("p",[v._v("clean：清理")])]),v._v(" "),_("li",[_("p",[v._v("test：测试")])]),v._v(" "),_("li",[_("p",[v._v("package：打包")])]),v._v(" "),_("li",[_("p",[v._v("install：安装")])])]),v._v(" "),_("h3",{attrs:{id:"_3-2-maven-生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-maven-生命周期"}},[v._v("#")]),v._v(" 3.2 Maven 生命周期")]),v._v(" "),_("p",[v._v("Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件。")]),v._v(" "),_("p",[v._v("Maven 对项目构建的生命周期划分为3套：")]),v._v(" "),_("ul",[_("li",[v._v("clean ：清理工作。")]),v._v(" "),_("li",[v._v("default ：核心工作，例如编译，测试，打包，安装等。")]),v._v(" "),_("li",[v._v("site ： 产生报告，发布站点等。这套声明周期一般不会使用。")])]),v._v(" "),_("p",[v._v("同一套生命周期内，执行后边的命令，前面的所有命令会自动执行。例如默认（default）生命周期如下：")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726173153576.png",alt:"image-20210726173153576"}}),v._v(" "),_("p",[v._v("当我们执行 "),_("code",[v._v("install")]),v._v("（安装）命令时，它会先执行 "),_("code",[v._v("compile")]),v._v("命令，再执行 "),_("code",[v._v("test")]),v._v(" 命令，再执行 "),_("code",[v._v("package")]),v._v(" 命令，最后执行 "),_("code",[v._v("install")]),v._v(" 命令。")]),v._v(" "),_("p",[v._v("默认的生命周期也有对应的很多命令，其他的一般都不会使用，我们只关注常用的：")]),v._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20210726173619353.png",alt:"image-20210726173619353"}}),v._v(" "),_("h2",{attrs:{id:"_4-idea-中使用-maven"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-idea-中使用-maven"}},[v._v("#")]),v._v(" 4. IDEA 中使用 Maven")]),v._v(" "),_("h3",{attrs:{id:"_4-1-idea-配置-maven-环境"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-idea-配置-maven-环境"}},[v._v("#")]),v._v(" 4.1 IDEA 配置 Maven 环境")]),v._v(" "),_("ol",[_("li",[v._v("选择 IDEA 中 File -> Settings")]),v._v(" "),_("li",[v._v("搜索 Maven")]),v._v(" "),_("li",[v._v("设置 IDEA 使用本地的 Maven，并修改配置文件路径")])]),v._v(" "),_("h3",{attrs:{id:"_4-2-maven-坐标详解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-maven-坐标详解"}},[v._v("#")]),v._v(" 4.2 Maven 坐标详解")]),v._v(" "),_("p",[_("strong",[v._v("Maven 坐标")]),v._v("是资源的唯一标识，使用坐标来定义项目或引入项目中需要的依赖。")]),v._v(" "),_("p",[v._v("坐标的组成：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("groupId")]),v._v("：定义当前Maven项目隶属"),_("strong",[v._v("组织名")]),v._v("称（通常是域名反写，例如：com.itheima）")]),v._v(" "),_("li",[_("strong",[v._v("artifactId")]),v._v("：定义当前Maven"),_("strong",[v._v("项目名")]),v._v("称（通常是模块名称，例如 order-service、goods-service）")]),v._v(" "),_("li",[_("strong",[v._v("version")]),v._v("：定义当前项目"),_("strong",[v._v("版本号")])])]),v._v(" "),_("blockquote",[_("p",[v._v("注意：")]),v._v(" "),_("ul",[_("li",[v._v("上面所说的资源可以是"),_("strong",[v._v("插件")]),v._v("、依赖、当前项目。")]),v._v(" "),_("li",[v._v("我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);