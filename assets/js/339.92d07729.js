(window.webpackJsonp=window.webpackJsonp||[]).push([[339],{1110:function(s,t,a){"use strict";a.r(t);var e=a(22),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("参考："),a("a",{attrs:{href:"https://time.geekbang.org/column/intro/100114501?tab=catalog",target:"_blank",rel:"noopener noreferrer"}},[s._v("Kubernetes 入门实战课 | 极客时间"),a("OutboundLink")],1),s._v(" 第 27-29 讲")])]),s._v(" "),a("h2",{attrs:{id:"_1-滚动更新-如何做到平滑的应用升级降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-滚动更新-如何做到平滑的应用升级降级"}},[s._v("#")]),s._v(" 1. 滚动更新：如何做到平滑的应用升级降级？")]),s._v(" "),a("p",[s._v("Deployment、DaemonSet 和 StatefulSet 让我们能够部署任意形式的应用了，但为了让应用稳定运行，还需要有持续的运维工作。之前学习的 "),a("code",[s._v("kubectl scale")]),s._v(" 来调整 Deployment 或 StatefulSet 下属的 pod 数量就是一种常见的运维操作，但除了应用伸缩，我们还需要应用更新、版本回退等运维操作。")]),s._v(" "),a("p",[s._v("这一章以 Deployment 为例，讲解 Kubernetes 在应用管理方面的高级操作：滚动更新，使用 "),a("code",[s._v("kubectl rollout")]),s._v(" 实现用户无感知的应用升级和降级。")]),s._v(" "),a("h3",{attrs:{id:"_1-1-kubernetes-如何定义应用版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-kubernetes-如何定义应用版本"}},[s._v("#")]),s._v(" 1.1 Kubernetes 如何定义应用版本")]),s._v(" "),a("p",[s._v("对一个线上运行的系统进行更新是一件棘手的事情，“给空中的飞机换引擎”，而 Kubernetes 把这个过程给抽象出来，让计算机去完成那些复杂繁琐的人工操作。")]),s._v(" "),a("p",[s._v("K8s 中版本更新主要是两个命令："),a("strong",[s._v("kubectl apply")]),s._v(" 和 "),a("strong",[s._v("kubectl rollout")]),s._v("。")]),s._v(" "),a("p",[s._v("首先我们需要知道所谓的“版本”是什么。Kubernetes 中应用都是以 Pod 来运行，而 Pod 又被 Deployment 管理，所以"),a("strong",[s._v("应用的“版本更新”实际上更新的是整个 Pod")]),s._v("。而 Pod 其实又是 Deployment 对象中的 "),a("code",[s._v("template")]),s._v(" 字段，所以 "),a("strong",[s._v("Kubernetes 中应用的版本变化就是 template 字段中 Pod 的变化")]),s._v("。因此，哪怕 "),a("code",[s._v("template")]),s._v(" 里只变动了一个字段，那也会形成一个新的版本，也算是版本变化。")]),s._v(" "),a("p",[s._v("Kubernetes 使用摘要算法计算 "),a("code",[s._v("template")]),s._v(" 里 Hash 值作为版本号，这虽不太方便识别，但很实用。")]),s._v(" "),a("p",[s._v("我们以之前运行的 nginx 作为例子：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610194021.png",alt:"20230610194021"}})]),s._v(" "),a("p",[s._v('名字中的随机数"6796..."就是 Pod 模板的 Hash 值，也就是 Pod 的“版本号”。如果你变动了 Deployment 下 template 中 Pod 的 YAML 任一描述，都会生成一个新的应用版本，kubectl apply 后就会重新创建 Pod：')]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610194221.png",alt:"20230610194221"}})]),s._v(" "),a("p",[s._v("可以看到，Pod 名字中的 hash 值发生了变动，这表示 Pod 的版本更新了。")]),s._v(" "),a("h3",{attrs:{id:"_1-2-kubernetes-如何实现应用更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-kubernetes-如何实现应用更新"}},[s._v("#")]),s._v(" 1.2 Kubernetes 如何实现应用更新")]),s._v(" "),a("p",[s._v("我们可以尝试进行应用更新，由于 Kubernetes 的动作太快了，为了能够观察到应用的更新过程，我们可以加一个字段 "),a("code",[s._v("minReadySeconds")]),s._v("，让 Kubernetes 在更新过程中等待一点时间，确认 Pod 没问题之后才继续其余 Pod 的创建工作：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" apps/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("dep\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  minReadySeconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确认Pod就绪的等待时间")]),s._v("\n  replicas"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("1.22"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("alpine\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("blockquote",[a("p",[s._v("注意，"),a("code",[s._v("minReadySeconds")]),s._v(" 这个字段不属于 Pod 模板，所以它不会影响 Pod 的版本。")])]),s._v(" "),a("p",[s._v("当我们对 Deployment 对象中 template 字段下的 Pod 描述进行更改后，可以执行 "),a("code",[s._v("kubectl apply")]),s._v(" 来更新应用，这个过程会触发“版本更新”，可以使用 "),a("mark",[s._v("kubectl rollout status")]),s._v(" 来查看应用更新的状态：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl apply -f ngx-v2.yml\nkubectl rollout status deployment ngx-dep\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610195012.png",alt:"20230610195012"}})]),s._v(" "),a("p",[s._v("更新完成之后，再去执行 "),a("code",[s._v("kubectl get pod")]),s._v(" 就可以看到，Pod 已经全部替换成了新的版本号。")]),s._v(" "),a("p",[s._v("仔细观察 "),a("code",[s._v("kubectl rollout status")]),s._v(" 的输出信息可以发现，Kubernetes 并不是把旧的 Pod 全部销毁然后再一次性创建出来新的 Pod，而是"),a("strong",[s._v("逐个创建新 Pod，同时也在销毁旧 Pod，保证系统里始终有足够数量的 Pod 在运行，不会有“空窗期”中断服务")]),s._v("。这就是"),a("mark",[s._v("滚动更新")]),s._v("。")]),s._v(" "),a("p",[s._v("使用命令 "),a("code",[s._v("kubectl describe")]),s._v(" 可以更清楚地看到 Pod 的变化情况：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl describe deploy ngx-dep\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610200026.png",alt:"20230610200026"}})]),s._v(" "),a("ul",[a("li",[s._v("一开始的时候V1 Pod（即ngx-dep-54b865d75）的数量是4；")]),s._v(" "),a("li",[s._v("当“滚动更新”开始的时候，Kubernetes创建1个 V2 Pod（即ngx-dep-d575d5776），并且把V1 Pod数量减少到3；")]),s._v(" "),a("li",[s._v("接着再增加V2 Pod的数量到2，同时V1 Pod的数量变成了1；")]),s._v(" "),a("li",[s._v("最后V2 Pod的数量达到预期值4，V1 Pod的数量变成了0，整个更新过程就结束了。")])]),s._v(" "),a("p",[s._v("其实可以看出来，滚动更新的过程就是由 Deployment 控制的两个同步进行的“应用伸缩”操作，老版本缩容到 0，同时新版本扩容到指定值，是一个”此消彼长“的过程。")]),s._v(" "),a("p",[s._v("这个滚动更新的过程可以参考下图：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610200244.png",alt:"20230610200244"}})]),s._v(" "),a("h3",{attrs:{id:"_1-3-kubernetes-如何管理应用更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-kubernetes-如何管理应用更新"}},[s._v("#")]),s._v(" 1.3 Kubernetes 如何管理应用更新")]),s._v(" "),a("p",[s._v("当 Kubernetes 的滚动更新过程中发生了错误或者更新后发现有 Bug 该怎么办？")]),s._v(" "),a("p",[s._v("要解决这两个问题，还是要用 "),a("code",[s._v("kubectl rollout")]),s._v(" 命令：")]),s._v(" "),a("ul",[a("li",[s._v("在应用的更新过程中，你可以随时用 "),a("strong",[s._v("kubectl rollout pause")]),s._v(" 来暂停更新、检查和修改 Pod，或者测试验证；")]),s._v(" "),a("li",[s._v("如果确认没问题，再用 "),a("strong",[s._v("kubectl rollout resume")]),s._v(" 来继续更新。")])]),s._v(" "),a("blockquote",[a("p",[s._v("要注意这两条命令只支持Deployment，不能用在DaemonSet、StatefulSet上（最新的1.24支持了StatefulSet的滚动更新）。")])]),s._v(" "),a("p",[s._v("对于更新后出现的问题，Kubernetes为我们提供了“后悔药”，也就是"),a("mark",[s._v("更新历史")]),s._v("，"),a("strong",[s._v("你可以查看之前的每次更新记录，并且回退到任何位置")]),s._v("，和我们开发常用的Git等版本控制软件非常类似。")]),s._v(" "),a("p",[s._v("查看更新历史使用的命令是 "),a("strong",[s._v("kubectl rollout history")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl rollout "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v(" deploy ngx-dep\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610200947.png",alt:"20230610200947"}})]),s._v(" "),a("p",[s._v("但 "),a("code",[s._v("kubectl rollout history")]),s._v(" 的列表输出的有用信息太少，你可以"),a("strong",[s._v("在命令后加上参数 "),a("code",[s._v("--revision")]),s._v(" 来查看每个版本的详细信息")]),s._v("，包括标签、镜像名、环境变量、存储卷等等，通过这些就可以大致了解每次都变动了哪些关键字段：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610201238.png",alt:"20230610201238"}})]),s._v(" "),a("p",[s._v("假设我们认为刚刚更新的 "),a("code",[s._v("nginx:1.22-alpine")]),s._v(" 不好，"),a("strong",[s._v("想要回退到上一个版本，就可以使用命令 "),a("code",[s._v("kubectl rollout undo")]),s._v("，也可以加上参数 "),a("code",[s._v("--to-revision")]),s._v(" 回退到任意一个历史版本")]),s._v("：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610201330.png",alt:"20230610201330"}})]),s._v(" "),a("p",[a("code",[s._v("kubectl rollout undo")]),s._v(" 的操作过程其实和 "),a("code",[s._v("kubectl apply")]),s._v(" 是一样的，执行的仍然是“滚动更新”，只不过使用的是旧版本Pod模板，把新版本Pod数量收缩到0，同时把老版本Pod扩展到指定值。")]),s._v(" "),a("p",[s._v("这个V2到V1的“版本降级”的过程如下图，它和“版本升级”过程是完全一样的，不同的只是版本号的变化方向：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610201411.png",alt:"20230610201411"}})]),s._v(" "),a("h3",{attrs:{id:"_1-4-kubernetes-如何添加更新描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-kubernetes-如何添加更新描述"}},[s._v("#")]),s._v(" 1.4 Kubernetes 如何添加更新描述")]),s._v(" "),a("p",[s._v("每次版本更新时，能不能加一个说明信息呢？")]),s._v(" "),a("p",[s._v("可以，"),a("strong",[s._v("只需要在 Deployment 的 metadata 里加上一个新的字段 annotations")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("annotations")]),s._v(" 字段的含义是“注解”“注释”，形式上和 "),a("code",[s._v("labels")]),s._v(" 一样，都是Key-Value，也都是给API对象附加一些额外的信息，但是用途上区别很大：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("annotations")]),s._v(" 添加的信息一般是给Kubernetes内部的各种对象使用的，有点像是“扩展属性”；")]),s._v(" "),a("li",[a("code",[s._v("labels")]),s._v(" 主要面对的是Kubernetes外部的用户，用来筛选、过滤对象的。")])]),s._v(" "),a("p",[s._v("如果用一个简单的比喻来说呢，"),a("strong",[a("code",[s._v("annotations")]),s._v(" 就是包装盒里的产品说明书，而 "),a("code",[s._v("labels")]),s._v(" 是包装盒外的标签贴纸")]),s._v("。借助 "),a("code",[s._v("annotations")]),s._v("，Kubernetes既不破坏对象的结构，也不用新增字段，就能够给API对象添加任意的附加信息，这就是面向对象设计中典型的OCP“开闭原则”，让对象更具扩展性和灵活性。")]),s._v(" "),a("p",[a("code",[s._v("annotations")]),s._v(" 里的值可以任意写，Kubernetes会自动忽略不理解的Key-Value，但要编写更新说明就需要使用特定的字段 "),a("strong",[s._v("kubernetes.io/change-cause")]),s._v("。")]),s._v(" "),a("p",[s._v("如下是 3 个版本的 nginx 应用，同时里面含有更新说明：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" apps/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("dep\n  annotations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    kubernetes.io/change"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ngx=1.21\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" apps/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("dep\n  annotations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    kubernetes.io/change"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" update to v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ngx=1.22\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" apps/v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Deployment\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("dep\n  annotations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    kubernetes.io/change"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" update to v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" change name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("注意以上三个版本的 metadata 部分，使用 "),a("code",[s._v("kubernetes.io/change-cause")]),s._v(" 描述了版本更新的情况，这样更新版本之后，我们在使用 "),a("code",[s._v("kubectl rollout history")]),s._v(" 命令就可以看到更新历史：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610201936.png",alt:"20230610201936"}})]),s._v(" "),a("p",[s._v("这次显示的列表信息就好看多了，每个版本的主要变动情况列得非常清楚，和Git版本管理的感觉很像。")]),s._v(" "),a("h3",{attrs:{id:"_1-5-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-小结"}},[s._v("#")]),s._v(" 1.5 小结")]),s._v(" "),a("p",[s._v("这一章主要讲的滚动更新，小结一下要点：")]),s._v(" "),a("ol",[a("li",[s._v("Kubernetes 使用 template 的 hash 值作为版本号。")]),s._v(" "),a("li",[s._v("Kubernetes 的更新过程是滚动更新，保证了在更新过程中服务的始终可用。")]),s._v(" "),a("li",[s._v("管理应用更新使用的命令是 "),a("code",[s._v("kubectl rollout")]),s._v("，子命令有 "),a("code",[s._v("status")]),s._v("、 "),a("code",[s._v("history")]),s._v("、 "),a("code",[s._v("undo")]),s._v(" 等。")]),s._v(" "),a("li",[s._v("Kubernetes会记录应用的更新历史，可以使用 "),a("code",[s._v("history --revision")]),s._v(" 查看每个版本的详细信息，也可以在每次更新时添加注解 "),a("code",[s._v("kubernetes.io/change-cause")]),s._v("。")])]),s._v(" "),a("p",[s._v("另外，在Deployment里还有其他一些字段可以对滚动更新的过程做更细致的控制，它们都在 "),a("code",[s._v("spec.strategy.rollingUpdate")]),s._v(" 里，比如 "),a("code",[s._v("maxSurge")]),s._v("、 "),a("code",[s._v("maxUnavailable")]),s._v(" 等字段，分别控制最多新增Pod数和最多不可用Pod数，一般用默认值就足够了，你如果感兴趣也可以查看Kubernetes文档进一步研究。")]),s._v(" "),a("p",[s._v("课外小贴士：")]),s._v(" "),a("ul",[a("li",[s._v("Deployment 在版本更新的时候实际控制的是 ReplicaSet 对象，创建不同版本的 ReplicaSet，再由 ReplicaSet 来伸缩 Pod 数量。")]),s._v(" "),a("li",[s._v("除了使用 kubectl apply 来触发应用更新，你也可以使用其他任何能够修改 API 对象的方式，比如 kubectl edit、kubectl patch、kubectl set image 等命令。")]),s._v(" "),a("li",[s._v("Kubernetes 不会记录所有的更新历史，默认只会保留最近的 10 次操作，但这个值可以用字段 revisionHistoryLimit 调整。")])]),s._v(" "),a("h2",{attrs:{id:"_2-应用保障-如何让-pod-运行得更健康"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用保障-如何让-pod-运行得更健康"}},[s._v("#")]),s._v(" 2. 应用保障：如何让 Pod 运行得更健康？")]),s._v(" "),a("p",[s._v("作为Kubernetes里的核心概念和原子调度单位，Pod的主要职责是管理容器，以逻辑主机、容器集合、进程组的形式来代表应用，它的重要性是不言而喻的。")]),s._v(" "),a("p",[s._v("这一章回过头来看看 Pod 里面的两种配置：资源配额Resources、检查探针Probe。它们能够给Pod添加各种运行保障，让应用运行得更健康。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-容器资源配额"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-容器资源配额"}},[s._v("#")]),s._v(" 2.1 容器资源配额")]),s._v(" "),a("p",[s._v("容器有三大隔离技术：namespace、cgroup、chroot。其中的 namespace 实现了独立的进程空间，chroot 实现了独立的文件系统，而 cgroup 的作用是管控CPU、内存，保证容器不会无节制地占用基础资源，进而影响到系统里的其他应用。")]),s._v(" "),a("p",[s._v("但容器总是要使用CPU和内存的，该怎么处理好需求与限制这两者之间的关系呢？")]),s._v(" "),a("p",[s._v("Kubernetes 的做法是，容器需要先提出一个“书面申请”，Kubernetes再依据这个“申请”决定资源是否分配和如何分配。由于 CPU、内存等是直接内置在节点系统中的，不需要像存储卷那样“外挂”，所以申请和管理的过程就简单了许多。")]),s._v(" "),a("p",[s._v("具体的申请方法很简单，"),a("strong",[s._v("只要在Pod容器的描述部分添加一个新字段 "),a("code",[s._v("resources")]),s._v(" 就可以了")]),s._v("，它就相当于申请资源的 Claim。如下是一个 YAML 示例：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("pod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("resources\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  containers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("alpine\n    name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx\n\n    resources"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10m\n        memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 100Mi\n      limits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 20m\n        memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 200Mi\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("这个YAML文件定义了一个Nginx Pod，我们需要重点学习的是 "),a("code",[s._v("containers.resources")]),s._v("，它下面有两个字段：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("requests")]),s._v("：意思是容器要申请的资源，也就是说要求Kubernetes在创建Pod的时候必须分配这里列出的资源，否则容器就无法运行。")]),s._v(" "),a("li",[a("strong",[s._v("limits")]),s._v("：意思是容器使用资源的上限，不能超过设定值，否则就有可能被强制停止运行。")])]),s._v(" "),a("p",[s._v("在请求 "),a("code",[s._v("cpu")]),s._v(" 和 "),a("code",[s._v("memory")]),s._v(" 这两种资源的时候，你需要特别注意它们的表示方式。")]),s._v(" "),a("p",[s._v("内存的写法和磁盘容量一样，使用 "),a("code",[s._v("Ki")]),s._v("、 "),a("code",[s._v("Mi")]),s._v("、 "),a("code",[s._v("Gi")]),s._v(" 来表示 "),a("code",[s._v("KB")]),s._v("、 "),a("code",[s._v("MB")]),s._v("、 "),a("code",[s._v("GB")]),s._v("，比如 "),a("code",[s._v("512Ki")]),s._v("、 "),a("code",[s._v("100Mi")]),s._v("、 "),a("code",[s._v("0.5Gi")]),s._v(" 等。")]),s._v(" "),a("p",[s._v("而CPU因为在计算机中数量有限，非常宝贵，所以Kubernetes允许容器精细分割CPU，即可以1个、2个地完整使用CPU，也可以用小数0.1、0.2的方式来部分使用CPU。这其实是效仿了UNIX“时间片”的用法，意思是进程最多可以占用多少CPU时间。")]),s._v(" "),a("p",[s._v("不过CPU时间也不能无限分割，"),a("strong",[s._v("Kubernetes里CPU的最小使用单位是0.001，为了方便表示用了一个特别的单位 "),a("code",[s._v("m")])]),s._v("，也就是“milli”“毫”的意思，比如说500m就相当于0.5。")]),s._v(" "),a("p",[s._v("现在我们再来看这个YAML，你就应该明白了，它向系统申请的是1%的CPU时间和100MB的内存，运行时的资源上限是2%CPU时间和200MB内存。"),a("strong",[s._v("有了这个申请，Kubernetes就会在集群中查找最符合这个资源要求的节点去运行Pod")]),s._v("。")]),s._v(" "),a("p",[s._v("如果 Pod 不写 "),a("code",[s._v("resources")]),s._v(" 字段，那就意味着 Pod 对运行的资源要求“既没有下限，也没有上限“，Kubernetes 不用管CPU和内存是否足够，可以把 Pod 调度到任意的节点上，而且后续 Pod 运行时也可以无限制地使用 CPU 和内存。在生产环境下，为避免 Pod 因资源不足而运行缓慢或占用太多资源，应当合理评估 Pod 的资源使用情况，并尽量为 Pod 加上限制。")]),s._v(" "),a("p",[s._v("那如果预估错误导致 Pod 申请的资源过多，而系统无法满足会怎么样？我们尝试让 Pod 申请 10 个 CPU，可以发现，API 对象可以创建成功，但当我们使用 "),a("code",[s._v("kubectl get pod")]),s._v(' 去查看时，会发现它一直处于 "Pending" 状态，实际上没有被真正调度：')]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610204510.png",alt:"20230610204510"}})]),s._v(" "),a("p",[s._v("如果我们使用命令 "),a("code",[s._v("kubectl describe")]),s._v(" 来查看具体原因，会发现有这么一句提示：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610204541.png",alt:"20230610204541"}})]),s._v(" "),a("p",[s._v("这就很明确地告诉我们Kubernetes调度失败，当前集群里的所有节点都无法运行这个Pod，因为它要求的CPU实在是太多了。")]),s._v(" "),a("h3",{attrs:{id:"_2-2-容器状态探针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-容器状态探针"}},[s._v("#")]),s._v(" 2.2 容器状态探针")]),s._v(" "),a("p",[s._v("当一个程序正常启动后，也有可能在运行时发生死锁或死循环等故障，这时在外部看进程一切正常，但在内部已经是一团糟了。所以，我们还希望Kubernetes这个“保姆”能够更细致地监控Pod的状态，除了保证崩溃重启，还必须要能够探查到Pod的内部运行状态，定时给应用做“体检”，让应用时刻保持“健康”，能够满负荷稳定工作。")]),s._v(" "),a("p",[s._v("那应该用什么手段来检查应用的健康状态呢？")]),s._v(" "),a("p",[s._v("由于各种程序对外界来说就是一个黑盒子，只能看到启动、执行、停止这三个基本状态，此外就没有什么好的办法来知道它内部是否正常了。所以我们必须把应用变成灰盒子，让部分内部信息对外可见，这样Kubernetes才能够探查到内部的状态。")]),s._v(" "),a("p",[s._v("这里的检查过程就有点像核酸检测，Kubernetes 使用"),a("mark",[s._v("探针")]),s._v("（Probe）在应用的检查口去提取信息，然后根据这些信息来判断应用是否健康。")]),s._v(" "),a("p",[s._v("Kubernetes 为检查应用状态定义了三种探针，它们分别对应容器不同的状态：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Startup")]),s._v("，启动探针，用来检查应用是否已经启动成功，适合那些有大量初始化工作要做，启动很慢的应用。")]),s._v(" "),a("li",[a("strong",[s._v("Liveness")]),s._v("，存活探针，用来检查应用是否正常运行，是否存在死锁、死循环。")]),s._v(" "),a("li",[a("strong",[s._v("Readiness")]),s._v("，就绪探针，用来检查应用是否可以接收流量，是否能够对外提供服务。")])]),s._v(" "),a("p",[s._v("你需要注意这三种探针是递进的关系：应用程序先启动，加载完配置文件等基本的初始化数据就进入了Startup状态，之后如果没有什么异常就是Liveness存活状态，但可能有一些准备工作没有完成，还不一定能对外提供服务，只有到最后的Readiness状态才是一个容器最健康可用的状态。")]),s._v(" "),a("p",[s._v("这三个状态与探针的关系如下图：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610205028.png",alt:"20230610205028"}})]),s._v(" "),a("p",[s._v("那 Kubernetes 具体是如何使用状态和探针来管理容器的呢？")]),s._v(" "),a("p",[s._v("如果一个 Pod 里的容器配置了探针，"),a("strong",[s._v("Kubernetes 在启动容器后就会不断地调用探针来检查容器的状态")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("如果Startup探针失败，Kubernetes会认为容器没有正常启动，就会尝试反复重启，当然其后面的Liveness探针和Readiness探针也不会启动。")]),s._v(" "),a("li",[s._v("如果Liveness探针失败，Kubernetes就会认为容器发生了异常，也会重启容器。")]),s._v(" "),a("li",[s._v("如果Readiness探针失败，Kubernetes会认为容器虽然在运行，但内部有错误，不能正常提供服务，就会把容器从Service对象的负载均衡集合中排除，不会给它分配流量。")])]),s._v(" "),a("p",[s._v("知道了Kubernetes对这三种状态的处理方式，我们就可以在开发应用的时候编写适当的检查机制，让Kubernetes用“探针”定时为应用做“体检”了。")]),s._v(" "),a("p",[s._v("下图在刚才图的基础上，又补充上了 k8s 的处理动作，从这张图就可以很好地理解容器探针的工作流程了：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610205223.png",alt:"20230610205223"}})]),s._v(" "),a("h3",{attrs:{id:"_2-3-如何使用容器状态探针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-如何使用容器状态探针"}},[s._v("#")]),s._v(" 2.3 如何使用容器状态探针")]),s._v(" "),a("p",[s._v("我们看看如何在 Pod 的 YAML 描述文件里定义探针。")]),s._v(" "),a("p",[s._v("startupProbe、livenessProbe、readinessProbe这三种探针的配置方式都是一样的，关键字段有这么几个：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("periodSeconds")]),s._v("，执行探测动作的时间间隔，默认是10秒探测一次。")]),s._v(" "),a("li",[a("strong",[s._v("timeoutSeconds")]),s._v("，探测动作的超时时间，如果超时就认为探测失败，默认是1秒。")]),s._v(" "),a("li",[a("strong",[s._v("successThreshold")]),s._v("，连续几次探测成功才认为是正常，对于startupProbe和livenessProbe来说它只能是1。")]),s._v(" "),a("li",[a("strong",[s._v("failureThreshold")]),s._v("，连续探测失败几次才认为是真正发生了异常，默认是3次。")])]),s._v(" "),a("p",[s._v("至于探测方式，Kubernetes 支持3种：Shell、TCP Socket、HTTP GET，它们也需要在探针里配置：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("exec")]),s._v("，执行一个Linux命令，比如ps、cat等等，和container的command字段很类似。")]),s._v(" "),a("li",[a("strong",[s._v("tcpSocket")]),s._v("，使用TCP协议尝试连接容器的指定端口。")]),s._v(" "),a("li",[a("strong",[s._v("httpGet")]),s._v("，连接端口并发送HTTP GET请求。")])]),s._v(" "),a("p",[s._v("要使用这些探针，我们必须要在开发应用时预留出“检查口”，这样Kubernetes才能调用探针获取信息。这里我还是以Nginx作为示例，用ConfigMap编写一个配置文件：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ConfigMap\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("conf\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  default.conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      listen 80;\n      location = /ready "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        return 200 'I am ready';\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[s._v("在这个配置文件里，我们启用了80端口，然后用 "),a("code",[s._v("location")]),s._v(" 指令定义了HTTP路径 "),a("code",[s._v("/ready")]),s._v("，它作为对外暴露的“检查口”，用来检测就绪状态，返回简单的200状态码和一个字符串表示工作正常。")])]),s._v(" "),a("p",[s._v("现在我们来看一下Pod里三种探针的具体定义：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("pod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("probe\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  volumes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("vol\n    configMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("conf\n\n  containers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("alpine\n    name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx\n    ports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n    volumeMounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("mountPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" /etc/nginx/conf.d\n      name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("vol\n\n    startupProbe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      periodSeconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n      exec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/run/nginx.pid"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n    livenessProbe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      periodSeconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n      tcpSocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n\n    readinessProbe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      periodSeconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n      httpGet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" /ready\n        port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("StartupProbe使用了Shell方式，使用 "),a("code",[s._v("cat")]),s._v(" 命令检查Nginx存在磁盘上的进程号文件（/var/run/nginx.pid），如果存在就认为是启动成功，它的执行频率是每秒探测一次。")]),s._v(" "),a("p",[s._v("LivenessProbe使用了TCP Socket方式，尝试连接Nginx的80端口，每10秒探测一次。")]),s._v(" "),a("p",[s._v("ReadinessProbe使用的是HTTP GET方式，访问容器的 "),a("code",[s._v("/ready")]),s._v(" 路径，每5秒发一次请求。")]),s._v(" "),a("p",[s._v("现在我们用 "),a("code",[s._v("kubectl apply")]),s._v(" 创建这个Pod，可以成功运行，之后探针的检查应该都是正常的，你可以用 "),a("code",[s._v("kubectl logs")]),s._v(" 来看一下 nginx 的访问日志，里面记录了 HTTP GET 探针的执行情况：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610205659.png",alt:"20230610205659"}})]),s._v(" "),a("p",[s._v("从截图中你可以看到，Kubernetes正是以大约5秒一次的频率，向URI "),a("code",[s._v("/ready")]),s._v(" 发送HTTP请求，不断地检查容器是否处于就绪状态。")]),s._v(" "),a("p",[s._v("如果探针探测失败且 Kubernetes 认为你的程序不健康后，便会采取处理措施。比如当 StartupProbe 探测失败的时候，Kubernetes 就会不停地重启容器，现象就是 kubectl get pod 中打印的 "),a("code",[s._v("RESTARTS")]),s._v(" 次数不断增加：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610205852.png",alt:"20230610205852"}})]),s._v(" "),a("h3",{attrs:{id:"_2-4-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-小结"}},[s._v("#")]),s._v(" 2.4 小结")]),s._v(" "),a("p",[s._v("这一章讲了两种为 Pod 配置运行保障的方式：Resources 和 Probe。Resources 就是为容器加上资源限制，而 Probe 就是主动健康检查，让 Kubernetes 实时地监控应用的运行状态。")]),s._v(" "),a("p",[s._v("简单小结一下今天的内容：")]),s._v(" "),a("ol",[a("li",[s._v("资源配额使用的是cgroup技术，可以限制容器使用的CPU和内存数量，让Pod合理利用系统资源，也能够让Kubernetes更容易调度Pod。")]),s._v(" "),a("li",[s._v("Kubernetes定义了Startup、Liveness、Readiness三种健康探针，它们分别探测应用的启动、存活和就绪状态。")]),s._v(" "),a("li",[s._v("探测状态可以使用Shell、TCP Socket、HTTP Get三种方式，还可以调整探测的频率和超时时间等参数。")])]),s._v(" "),a("p",[s._v("课外小贴士：")]),s._v(" "),a("ul",[a("li",[s._v("现在的服务器都是多核 CPU，在 Kubernetes 里的“CPU”指的是“逻辑 CPU”，也就是操作系统里能够看到的 CPU。")]),s._v(" "),a("li",[s._v("StartupProbe 和 livenessProbe 探测失败后的动作其实是由字段“restartPolicy”决定的，它的默认值“On-Failure”就是重启容器。")]),s._v(" "),a("li",[s._v("探针可以配置“initialDelaySeconds”字段，表示容器启动后多久才执行探针动作，适用于某些启动比较慢的应用，它的默认值是 0。")]),s._v(" "),a("li",[s._v("在容器里还可以配置 lifecycle 字段，在启动后和终止前安装两个钩子：postStart 和 preStop，执行 Shell 命令或者发送 HTTP 请求做一些初始化和收尾工作。")])]),s._v(" "),a("h2",{attrs:{id:"_3-集群管理-如何用名字空间分隔系统资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-集群管理-如何用名字空间分隔系统资源"}},[s._v("#")]),s._v(" 3. 集群管理：如何用名字空间分隔系统资源？")]),s._v(" "),a("p",[s._v("之前学习了如何保障 Pod 很好地运行，那在集群层次，有没有类似的方法来为 Kubernetes 提供运行保障呢？Kubernetes 提供了很多手段来管理、控制集群的资源。")]),s._v(" "),a("h3",{attrs:{id:"_3-1-为什么要有-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-为什么要有-namespace"}},[s._v("#")]),s._v(" 3.1 为什么要有 Namespace")]),s._v(" "),a("p",[a("strong",[s._v("Kubernetes 中的 Namespace 并不是一个实体对象，而是一个逻辑上的概念")]),s._v("。它可以把集群切分成一个个彼此独立的区域，然后我们把对象放到这些区域里，应用就只能在自己的 Namespace 中分配资源和运行，不会干扰到其他 Namespace 中的应用。")]),s._v(" "),a("p",[s._v("Namespace 是 Kubernetes 面对大规模集群、海量节点时的一种现实考虑，因为当集群很大时，难免出现资源争抢和命名冲突等问题。所以当多团队、多项目共用 Kubernetes 时，为了避免这些问题的出现，我们就需要把集群给适当地“局部化”，为每一类用户创建出只属于它自己的“工作空间”。")]),s._v(" "),a("h3",{attrs:{id:"_3-2-如何使用-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-如何使用-namespace"}},[s._v("#")]),s._v(" 3.2 如何使用 Namespace")]),s._v(" "),a("p",[s._v("Namespace 也是一种 API 对象，简称为 "),a("strong",[s._v("ns")]),s._v("。")]),s._v(" "),a("p",[s._v("命令 "),a("code",[s._v("kubectl create ns <名称>")]),s._v(" 就可以很容易地创建一个名字空间：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl create ns test-ns\nkubectl get ns\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("Kubernetes 初始化集群的时候也会预设4个 Namespace：default、kube-system、kube-public、kube-node-lease。我们常用的是前两个，"),a("code",[s._v("default")]),s._v(" 是用户对象默认的 Namespace，"),a("code",[s._v("kube-system")]),s._v(" 是系统组件所在的 Namespace，相信你对它们已经很熟悉了。")]),s._v(" "),a("p",[a("strong",[s._v("想要把一个对象放入特定的名字空间，需要在它的 "),a("code",[s._v("metadata")]),s._v(" 里添加一个 "),a("code",[s._v("namespace")]),s._v(" 字段")]),s._v("，比如我们要在“test-ns”里创建一个简单的Nginx Pod，就要这样写：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx\n  namespace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ns\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  containers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("alpine\n    name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ngx\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("code",[s._v("kubectl apply")]),s._v(" 创建这个对象之后，我们直接用 "),a("code",[s._v("kubectl get")]),s._v(" 是看不到它的，因为默认查看的是“default”的 Namespace，"),a("strong",[s._v("想要操作其他 Namespace 的对象必须要用 "),a("code",[s._v("-n")]),s._v(" 参数明确指定")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl get pod -n test-ns\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为名字空间里的对象都从属于 Namespace，所以在删除名字空间的时候一定要小心，"),a("strong",[s._v("一旦名字空间被删除，它里面的所有对象也都会消失")]),s._v("。")]),s._v(" "),a("p",[s._v("可以执行 "),a("code",[s._v("kubectl delete ns <名称>")]),s._v(" 来删除一个 Namespace。")]),s._v(" "),a("p",[s._v("会发现删除 Namespace 后，它里面的Pod也会无影无踪了。")]),s._v(" "),a("h3",{attrs:{id:"_3-3-什么是资源配额"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-什么是资源配额"}},[s._v("#")]),s._v(" 3.3 什么是资源配额")]),s._v(" "),a("p",[s._v("有了名字空间，我们就可以像管理容器一样，给名字空间设定配额，把整个集群的计算资源分割成不同的大小，按需分配给团队或项目使用。不过集群和单机不一样，除了限制最基本的CPU和内存，还必须限制各种对象的数量，否则对象之间也会互相挤占资源。")]),s._v(" "),a("p",[s._v("名字空间的资源配额需要使用一个专门的 API 对象，叫做 "),a("mark",[s._v("ResourceQuota")]),s._v("，简称是 "),a("strong",[s._v("quota")]),s._v("。因为资源配额对象必须依附在某个名字空间上，所以在它的描述文件的 "),a("code",[s._v("metadata")]),s._v(" 字段里必须明确写出 "),a("code",[s._v("namespace")]),s._v("（否则就会应用到default名字空间）。")]),s._v(" "),a("p",[s._v("下面我们先创建一个名字空间“dev-ns”，再创建一个资源配额对象“dev-qt”：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Namespace\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ns\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("---")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ResourceQuota\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("qt\n  namespace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ns\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("ResourceQuota对象的使用方式比较灵活，既可以限制整个名字空间的配额，也可以只限制某些类型的对象（使用scopeSelector），今天我们看第一种，它需要在 "),a("code",[s._v("spec")]),s._v(" 里使用 "),a("code",[s._v("hard")]),s._v(" 字段，意思就是“"),a("strong",[s._v("硬性全局限制")]),s._v("”。")]),s._v(" "),a("p",[s._v("在 ResourceQuota 里可以设置各类资源配额，字段非常多，我简单地归了一下类，你可以课后再去官方文档上查找详细信息：")]),s._v(" "),a("ul",[a("li",[s._v("CPU和内存配额，使用 "),a("code",[s._v("request.*")]),s._v("、 "),a("code",[s._v("limits.*")]),s._v("，这是和容器资源限制是一样的。")]),s._v(" "),a("li",[s._v("存储容量配额，使 "),a("code",[s._v("requests.storage")]),s._v(" 限制的是PVC的存储总量，也可以用 "),a("code",[s._v("persistentvolumeclaims")]),s._v(" 限制PVC的个数。")]),s._v(" "),a("li",[s._v("核心对象配额，使用对象的名字（英语复数形式），比如 "),a("code",[s._v("pods")]),s._v("、 "),a("code",[s._v("configmaps")]),s._v("、 "),a("code",[s._v("secrets")]),s._v("、 "),a("code",[s._v("services")]),s._v("。")]),s._v(" "),a("li",[s._v("其他API对象配额，使用 "),a("code",[s._v("count/name.group")]),s._v(" 的形式，比如 "),a("code",[s._v("count/jobs.batch")]),s._v("、 "),a("code",[s._v("count/deployments.apps")]),s._v("。")])]),s._v(" "),a("p",[s._v("下面的这个YAML就是一个比较完整的资源配额对象：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ResourceQuota\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("qt\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ns\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  hard"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    requests.cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n    requests.memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10Gi\n    limits.cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n    limits.memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 20Gi\n\n    requests.storage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 100Gi\n    persistentvolumeclaims"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n\n    pods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n    configmaps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n    secrets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n    services"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n    count/jobs.batch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    count/cronjobs.batch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    count/deployments.apps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("我来稍微解释一下它为名字空间加上的全局资源配额：")]),s._v(" "),a("ul",[a("li",[s._v("所有Pod的需求总量最多是10个CPU和10GB的内存，上限总量是10个CPU和20GB的内存。")]),s._v(" "),a("li",[s._v("只能创建100个PVC对象，使用100GB的持久化存储空间。")]),s._v(" "),a("li",[s._v("只能创建100个Pod，100个ConfigMap，100个Secret，10个Service。")]),s._v(" "),a("li",[s._v("只能创建1个Job，1个CronJob，1个Deployment。")])]),s._v(" "),a("p",[s._v("这个YAML文件比较大，字段比较多，如果你觉得不是太容易阅读的话，也可以把它拆成几个小的YAML，分类限制资源数量，也许会更灵活一些。")]),s._v(" "),a("h3",{attrs:{id:"_3-4-如何使用资源配额"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-如何使用资源配额"}},[s._v("#")]),s._v(" 3.4 如何使用资源配额")]),s._v(" "),a("p",[s._v("现在让我们用 "),a("code",[s._v("kubectl apply")]),s._v(" 创建这个资源配额对象，然后用 "),a("code",[s._v("kubectl get")]),s._v(" 查看，记得要用 "),a("code",[s._v("-n")]),s._v(" 指定名字空间：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl apply -f quota-ns.yml\nkubectl get "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("quota")]),s._v(" -n dev-ns\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610214610.png",alt:"20230610214610"}})]),s._v(" "),a("p",[s._v("你可以看到输出了ResourceQuota的全部信息，但都挤在了一起，看起来很困难，这时可以再用命令 "),a("code",[s._v("kubectl describe")]),s._v(" 来查看对象，它会给出一个清晰的表格：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610214628.png",alt:"20230610214628"}})]),s._v(" "),a("p",[s._v("现在让我们尝试在这个名字空间里运行两个busybox Job，同样要加上 "),a("code",[s._v("-n")]),s._v(" 参数：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl create job echo1 -n dev-ns --image"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("busybox -- "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello\nkubectl create job echo2 -n dev-ns --image"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("busybox -- "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610214722.png",alt:"20230610214722"}})]),s._v(" "),a("p",[s._v("ResourceQuota限制了名字空间里最多只能有一个Job，所以创建第二个Job对象时会失败，提示超出了资源配额。再用命令 "),a("code",[s._v("kubectl describe")]),s._v(" 来查看，也会发现Job资源已经到达了上限：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610214910.png",alt:"20230610214910"}})]),s._v(" "),a("p",[s._v("只有删除掉第一个 Job，第二个 Job 才能运行。")]),s._v(" "),a("h3",{attrs:{id:"_3-5-默认资源配额"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-默认资源配额"}},[s._v("#")]),s._v(" 3.5 默认资源配额")]),s._v(" "),a("p",[s._v("学到这里估计你也发现了，在名字空间加上了资源配额限制之后，它会有一个合理但比较“烦人”的约束：要求所有在里面运行的Pod都必须用字段 "),a("code",[s._v("resources")]),s._v(" 声明资源需求，否则就无法创建。")]),s._v(" "),a("p",[s._v("比如说，现在我们想用命令 "),a("code",[s._v("kubectl run")]),s._v(" 创建一个Pod："),a("code",[s._v("kubectl run ngx --image=nginx:alpine -n dev-ns")]),s._v("，你会发现会给出一个“Forbidden”的错误提示，说不满足配额要求。")]),s._v(" "),a("p",[s._v("Kubernetes这样做的原因也很好理解，上一讲里我们说过，如果Pod里没有 "),a("code",[s._v("resources")]),s._v(" 字段，就可以无限制地使用CPU和内存，这显然与名字空间的资源配额相冲突。"),a("strong",[s._v("为了保证名字空间的资源总量可管可控，Kubernetes就只能拒绝创建这样的Pod了")]),s._v("。")]),s._v(" "),a("p",[s._v("这个约束对于集群管理来说是好事，但对于普通用户来说却带来了一点麻烦，本来YAML文件就已经够大够复杂的了，现在还要再增加几个字段，再费心估算它的资源配额。如果有很多小应用、临时Pod要运行的话，这样做的人力成本就比较高，不是太划算。")]),s._v(" "),a("p",[s._v("那么能不能让Kubernetes自动为Pod加上资源限制呢？也就是说给个默认值，这样就可以省去反复设置配额的烦心事。这个时候就要用到一个很小但很有用的辅助对象了—— "),a("mark",[s._v("LimitRange")]),s._v("，简称是 "),a("strong",[s._v("limits")]),s._v("，"),a("strong",[s._v("它能为API对象添加默认的资源配额限制")]),s._v("。")]),s._v(" "),a("p",[s._v("你可以用命令 "),a("code",[s._v("kubectl explain limits")]),s._v(" 来查看它的YAML字段详细说明，这里说几个要点：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("spec.limits")]),s._v(" 是它的核心属性，描述了默认的资源限制。")]),s._v(" "),a("li",[a("code",[s._v("type")]),s._v(" 是要限制的对象类型，可以是 "),a("code",[s._v("Container")]),s._v("、 "),a("code",[s._v("Pod")]),s._v("、 "),a("code",[s._v("PersistentVolumeClaim")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("default")]),s._v(" 是默认的资源上限，对应容器里的 "),a("code",[s._v("resources.limits")]),s._v("，只适用于 "),a("code",[s._v("Container")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("defaultRequest")]),s._v(" 默认申请的资源，对应容器里的 "),a("code",[s._v("resources.requests")]),s._v("，同样也只适用于 "),a("code",[s._v("Container")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("max")]),s._v("、 "),a("code",[s._v("min")]),s._v(" 是对象能使用的资源的最大最小值。")])]),s._v(" "),a("p",[s._v("这个YAML就示范了一个LimitRange对象：")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" LimitRange\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("limits\n  namespace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ns\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  limits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Container\n    defaultRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 200m\n      memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 50Mi\n    default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 500m\n      memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 100Mi\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Pod\n    max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 800m\n      memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 200Mi\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("它设置了每个容器默认申请0.2的CPU和50MB内存，容器的资源上限是0.5的CPU和100MB内存，每个Pod的最大使用量是0.8的CPU和200MB内存。")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("kubectl apply")]),s._v(" 创建LimitRange之后，再用 "),a("code",[s._v("kubectl describe")]),s._v(" 就可以看到它的状态：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230610215426.png",alt:"20230610215426"}})]),s._v(" "),a("p",[s._v("现在我们就可以不用编写 "),a("code",[s._v("resources")]),s._v(" 字段直接创建Pod了，再运行之前的 "),a("code",[s._v("kubectl run")]),s._v(" 命令：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("kubectl run ngx --image"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx:alpine -n dev-ns\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("有了这个默认的资源配额作为“保底”，这次就没有报错，Pod顺利创建成功，用 "),a("code",[s._v("kubectl describe")]),s._v(" 查看Pod的状态，也可以看到LimitRange为它自动加上的资源配额。")]),s._v(" "),a("h3",{attrs:{id:"_3-6-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-小结"}},[s._v("#")]),s._v(" 3.6 小结")]),s._v(" "),a("p",[s._v("这一章主要讲了如何使用 Namespace 来管理 Kubernetes 的集群资源。在生产环境中，为避免某些用户过度消耗资源，就非常有必要用名字空间做好集群的资源规划了。")]),s._v(" "),a("p",[s._v("简单小结一下内容：")]),s._v(" "),a("ol",[a("li",[s._v("名字空间是一个逻辑概念，没有实体，它的目标是为资源和对象划分出一个逻辑边界，避免冲突。")]),s._v(" "),a("li",[s._v("ResourceQuota 对象可以为名字空间添加资源配额，限制全局的CPU、内存和API对象数量。")]),s._v(" "),a("li",[s._v("LimitRange 对象可以为容器或者Pod添加默认的资源配额，简化对象的创建工作。")])]),s._v(" "),a("p",[s._v("课外小贴士：")]),s._v(" "),a("ul",[a("li",[s._v("不是所有的 API 对象都可以划分进名字空间管理的比如 Node、PV 等这样的全局资源就不属于任何名字空间。")]),s._v(" "),a("li",[s._v("因为 ResourceQuota 可以使用 scopeSelector 字段限制不同类型的对象，所以我们还可以在名字空间里设置多个不同策略的配额对象，更精细地控制资源。")]),s._v(" "),a("li",[s._v("在 LimitRange 对象里设置“max”字段可以有效地防止创建意外申请超量资源的对象。")])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);