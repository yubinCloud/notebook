(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{939:function(t,s,a){"use strict";a.r(s);var n=a(22),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-程序计数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序计数器"}},[t._v("#")]),t._v(" 1. 程序计数器")]),t._v(" "),a("p",[t._v("Program Counter Register "),a("mark",[t._v("程序计数器")])]),t._v(" "),a("ul",[a("li",[t._v("作用：记住下一条 JVM 指令的执行地址")]),t._v(" "),a("li",[t._v("在物理上，是通过"),a("strong",[t._v("寄存器")]),t._v("来实现的")]),t._v(" "),a("li",[t._v("特点：\n"),a("ul",[a("li",[t._v("是"),a("strong",[t._v("线程私有")]),t._v("的：每个线程都有自己的程序计数器，因为每个线程都有自己的一套字节码，不同线程会通过时间片来交替运行，交替过程中需要使用程序计数器来记录下当前程序运行到哪了。")]),t._v(" "),a("li",[a("strong",[t._v("不会存在内存溢出")]),t._v("：像其他的堆、栈等都可能出现内存溢出")])])])]),t._v(" "),a("p",[t._v("字节码和 JVM 指令如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403210649762.png",alt:"image-20230403210649762"}}),t._v(" "),a("h2",{attrs:{id:"_2-虚拟机栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟机栈"}},[t._v("#")]),t._v(" 2. 虚拟机栈")]),t._v(" "),a("h3",{attrs:{id:"_2-1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-定义"}},[t._v("#")]),t._v(" 2.1 定义")]),t._v(" "),a("p",[a("mark",[t._v("栈")]),t._v(" —— 线程运行需要的内存空间。由多个栈帧组成，"),a("strong",[t._v("栈帧")]),t._v("是每个方法运行时需要的内存。如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403211527259.png",alt:"image-20230403211527259"}}),t._v(" "),a("p",[t._v("每个线程只能有一个"),a("strong",[t._v("活动栈帧")]),t._v("，对应着当前正在执行的那个方法。")]),t._v(" "),a("blockquote",[a("p",[t._v("当你在 IDEA 中调试 debug Java 程序时，就会看到多个 frames，他们就是这里的栈帧：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403212000349.png",alt:"image-20230403212000349"}})]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("问题辨析")]),t._v(" "),a("ol",[a("li",[t._v("垃圾回收是否涉及栈内存？")])]),t._v(" "),a("p",[t._v("不。垃圾回收只会回收堆中的内存。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("栈内存分配越大越好吗？")])]),t._v(" "),a("p",[t._v("Java 启动时可以通过 "),a("code",[t._v("-Xss")]),t._v(" 来设置栈内存。由于物理内存是一定的，"),a("strong",[t._v("当把栈内存分配太大时，会让线程数变少")]),t._v("。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("方法内的局部变量是否线程安全？")])]),t._v(" "),a("p",[t._v("局部变量是存在于栈帧中，每个线程会有一个栈，因此这个"),a("strong",[t._v("局部变量也是线程私有的，不同线程之间不会互相干扰")]),t._v("。但 "),a("strong",[t._v("static 是多个线程共享的")]),t._v("，多线程下必须对其进行保护：")]),t._v(" "),a("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403213401872.png",alt:"image-20230403213401872"}}),t._v(" "),a("p",[a("strong",[t._v("判断一个变量是否线程安全，不仅要看这个变量是否为局部变量，还看这个变量是否逃离了方法的作用范围")]),t._v("。比如你 return 一个局部变量创建的对象后，那这个对象就有可能被别的线程在调用方法后拿到。")]),t._v(" "),a("p",[t._v("因此可以总结：")]),t._v(" "),a("ul",[a("li",[t._v("如果方法内局部变量没有逃离方法的作用访问，它是线程安全的。")]),t._v(" "),a("li",[t._v("如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全")])])]),t._v(" "),a("h3",{attrs:{id:"_2-2-栈内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-栈内存溢出"}},[t._v("#")]),t._v(" 2.2 栈内存溢出")]),t._v(" "),a("p",[t._v("往往是两个原因：")]),t._v(" "),a("ul",[a("li",[t._v("栈帧过多导致栈内存溢出")]),t._v(" "),a("li",[t._v("栈帧过大导致栈内存溢出")])]),t._v(" "),a("p",[t._v("从而出现 "),a("strong",[t._v("StackOverflowError")]),t._v(" 的异常。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-线程运行诊断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-线程运行诊断"}},[t._v("#")]),t._v(" 2.3 线程运行诊断")]),t._v(" "),a("h4",{attrs:{id:"_2-3-1-案例一-cpu-占用过多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-案例一-cpu-占用过多"}},[t._v("#")]),t._v(" 2.3.1 案例一：CPU 占用过多")]),t._v(" "),a("p",[t._v("定位过程：")]),t._v(" "),a("ul",[a("li",[t._v("用 top 命令定位哪个进程对 CPU 的占用过高")]),t._v(" "),a("li",[a("code",[t._v("ps H -eo pid,tid,%cpu | grep 进程id")]),t._v(" （用 ps 命令进一步定位是哪个线程引起的 cpu 占用过高）")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("jstack 进程id")]),t._v(" 可以根据线程 id（nid）找到有问题的线程id，进一步定位到问题代码的源码行号")])]),t._v(" "),a("h4",{attrs:{id:"_2-3-1-案例二-程序运行很长时间没有结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-案例二-程序运行很长时间没有结果"}},[t._v("#")]),t._v(" 2.3.1 案例二：程序运行很长时间没有结果")]),t._v(" "),a("p",[t._v("使用 jstack 可以检测到死锁现象：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403221106747.png",alt:"image-20230403221106747"}}),t._v(" "),a("h2",{attrs:{id:"_3-本地方法栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地方法栈"}},[t._v("#")]),t._v(" 3. 本地方法栈")]),t._v(" "),a("p",[a("mark",[t._v("Native Method")]),t._v(" 是指不使用 Java 而编写的代码，比如有时为了与底层 OS 打交道，而需要调用 C 的代码等。这些 native method 运行时所使用的内存就是"),a("mark",[t._v("本地方法栈")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("Java 标准库中 Object.hashCode、Object.clone 等方法都是用 C/C++ 编写的，而 Java 是通过本地方法接口来调用这些方法。")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403222034459.png",alt:"image-20230403222034459"}}),t._v(" "),a("h2",{attrs:{id:"_4-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-堆"}},[t._v("#")]),t._v(" 4. 堆")]),t._v(" "),a("p",[t._v("刚刚讲的部分都是线程私有的，而现在要讲的堆和后面要讲的方法区都是"),a("strong",[t._v("线程共享")]),t._v("的。")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230403222352736.png",alt:"image-20230403222352736"}}),t._v(" "),a("h3",{attrs:{id:"_4-1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-定义"}},[t._v("#")]),t._v(" 4.1 定义")]),t._v(" "),a("p",[a("mark",[t._v("Heap")]),t._v("：通过 new 关键字，创建对象都会使用堆内存")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("它是"),a("strong",[t._v("线程共享")]),t._v("的，"),a("strong",[t._v("堆中对象都需要考虑线程安全的问题")])]),t._v(" "),a("li",[t._v("有垃圾回收机制")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-堆内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-堆内存溢出"}},[t._v("#")]),t._v(" 4.2 堆内存溢出")]),t._v(" "),a("p",[t._v("如果不断创建大量对象，而且这些对象还被使用，那就可能产生堆内存溢出错误："),a("strong",[t._v("OutOfMemoryError")]),t._v("。")]),t._v(" "),a("p",[t._v("JVM 参数 "),a("code",[t._v("-Xmx")]),t._v(" 可以控制最多可以使用的堆空间。")]),t._v(" "),a("h3",{attrs:{id:"_4-3-堆内存诊断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-堆内存诊断"}},[t._v("#")]),t._v(" 4.3 堆内存诊断")]),t._v(" "),a("h4",{attrs:{id:"_4-3-1-jps-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-jps-工具"}},[t._v("#")]),t._v(" 4.3.1 jps 工具")]),t._v(" "),a("p",[t._v("查看当前系统中有哪些 java  进程")]),t._v(" "),a("h4",{attrs:{id:"_4-3-2-jmap-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-jmap-工具"}},[t._v("#")]),t._v(" 4.3.2 jmap 工具")]),t._v(" "),a("p",[t._v("查看堆内存占用情况："),a("code",[t._v("jmap -heap 进程id")])]),t._v(" "),a("h4",{attrs:{id:"_4-3-3-jconsole-工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-jconsole-工具"}},[t._v("#")]),t._v(" 4.3.3 jconsole 工具")]),t._v(" "),a("p",[t._v("图形界面的，多功能的监测工具，可以连续监测。这个工具很直观。")]),t._v(" "),a("h4",{attrs:{id:"_4-3-4-jvirsualvm-工具​"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-jvirsualvm-工具​"}},[t._v("#")]),t._v(" 4.3.4 jvirsualvm 工具​ ⭐️")]),t._v(" "),a("p",[t._v("监视更加直观。")]),t._v(" "),a("ul",[a("li",[t._v("其中“"),a("strong",[t._v("堆 dump")]),t._v("”（堆转储）工具可以抓取堆内存的快照，并对其中的对象进行分析")])]),t._v(" "),a("h2",{attrs:{id:"_5-方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-方法区"}},[t._v("#")]),t._v(" 5. 方法区")]),t._v(" "),a("h3",{attrs:{id:"_5-1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-定义"}},[t._v("#")]),t._v(" 5.1 定义")]),t._v(" "),a("p",[t._v("Oracle 中 JVM 规范对方法区的定义如下：")]),t._v(" "),a("p",[t._v("The Java Virtual Machine has a "),a("mark",[t._v("method area")]),t._v(" that "),a("strong",[t._v("is shared")]),t._v(' among all Java Virtual Machine threads. The method area is analogous to the storage area for compiled code of a conventional language or analogous to the "text" segment in an operating system process. '),a("strong",[t._v("It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors")]),t._v(", including the special methods ("),a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.9",target:"_blank",rel:"noopener noreferrer"}},[t._v("§2.9"),a("OutboundLink")],1),t._v(") used in class and instance initialization and interface initialization.")]),t._v(" "),a("p",[a("strong",[t._v("The method area is created on virtual machine start-up")]),t._v(". Although the method area is logically "),a("strong",[t._v("part of the heap")]),t._v(", simple implementations may choose not to either garbage collect or compact it. This specification does not mandate the location of the method area or the policies used to manage compiled code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous.")]),t._v(" "),a("p",[t._v("A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size.")]),t._v(" "),a("p",[t._v("The following exceptional condition is associated with the method area:")]),t._v(" "),a("ul",[a("li",[t._v("If memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an "),a("code",[t._v("OutOfMemoryError")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"_5-2-组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-组成"}},[t._v("#")]),t._v(" 5.2 组成")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230405154709402.png",alt:"image-20230405154709402"}}),t._v(" "),a("p",[t._v("Method Area 只是一个概念，具体实现是取决于 JVM，在 1.6 中，PermGen（永久代）是 Method Area 的实现。")]),t._v(" "),a("p",[t._v("在 JVM 1.8 中，永久代被废弃，Method Area 被使用 Metaspace 来实现。Metaspace 不再占用堆内存，不再由 JVM 管理内存，而是被移到本地内存中了。")]),t._v(" "),a("h3",{attrs:{id:"_5-3-内存溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-内存溢出"}},[t._v("#")]),t._v(" 5.3 内存溢出")]),t._v(" "),a("ul",[a("li",[t._v("1.8 以前会导致永久代内存溢出（OutOfMemoryError）\n"),a("ul",[a("li",[t._v("JVM 参数 "),a("code",[t._v("-XX:MaxPermSize")]),t._v(" 可设置")])])]),t._v(" "),a("li",[t._v("1.8 之后会导致元空间内存溢出（OutOfMemoryError）\n"),a("ul",[a("li",[t._v("由于 metaspace 放在了本地内存中，因此一般不会溢出")]),t._v(" "),a("li",[t._v("JVM 参数 "),a("code",[t._v("-XX:MaxMetaspaceSize")]),t._v(" 可设置")])])])]),t._v(" "),a("h3",{attrs:{id:"_5-4-运行时常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-运行时常量池"}},[t._v("#")]),t._v(" 5.4 运行时常量池")]),t._v(" "),a("p",[a("mark",[t._v("常量池")]),t._v(" 就是一个符号表，为字节码提供常量符号（类名、方法名、字面量等），字节码只需提供一个符号表的编号（比如 "),a("code",[t._v("#1")]),t._v("），解析时可以通过查表来得到常量符号。")]),t._v(" "),a("p",[a("mark",[t._v("运行时常量池")]),t._v("：常量池是 *.class 文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址。")]),t._v(" "),a("h3",{attrs:{id:"_5-5-stringtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-stringtable"}},[t._v("#")]),t._v(" 5.5 StringTable")]),t._v(" "),a("h4",{attrs:{id:"_5-5-1-一道面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-1-一道面试题"}},[t._v("#")]),t._v(" 5.5.1 一道面试题")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" x2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" x1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 问，如果调换了【最后两行代码】的位置呢，如果是jdk1.6呢")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" x2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("h4",{attrs:{id:"_5-5-2-stringtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-2-stringtable"}},[t._v("#")]),t._v(" 5.5.2 StringTable")]),t._v(" "),a("p",[t._v("StringTable 也称为"),a("strong",[t._v("串池")]),t._v("。看下面例子：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("对于变量 s1，s2，s3，我们都知道它们被存在了栈中。可是后面的字符串呢？它被存储在哪个地方呢？经过反编译，我们得到如下 JVM 指令：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230405204953207.png",alt:"image-20230405204953207"}})]),t._v(" "),a("p",[t._v("这里的#2就是“a”，当类加载的时候，常量池中的信息会加载到运行时常量池中，此时的a，b，ab都还是符号，没有变成java对象。"),a("strong",[t._v("当运行此方法，执行到对应的代码时，才会将符号a变成“a”字符串对象，并将对象放入 StringTable 中")]),t._v("。 需要注意的是，普通的 java 对象在类加载的时候就会生成并放入堆中，而这种方式生成的 String 不同，"),a("strong",[t._v("只有当执行到新建String的代码时才会在 StringTable 中生成字符串对象")]),t._v("。")]),t._v(" "),a("p",[t._v("StringTable 是一个哈希表，这些 String 的字面量存在其中。在上例中，“a”就是哈希表的key。一开始的时候，会根据“a”到串池中找其对象，一开始是没有的，所以就会创建一个并放入串池中。串池为 [“a”]。")]),t._v(" "),a("p",[t._v("执行到指令ldc #3时，会和上面一样，生成一个“b”对象并放入串池中，串池变为[“a”, “b”]。同样地，后面会生成“ab”对象并放入串池中。串池变为[“a”, “b”, “ab”]。")]),t._v(" "),a("p",[t._v("小结一下："),a("strong",[t._v("字面量创建字符串对象是懒惰的")]),t._v("，即只有执行到相应代码才会创建相应对象（和一般的类不同）并放入串池中。"),a("strong",[t._v("如果串池中已经有了，就直接使用串池中的对象")]),t._v("（让引用变量指向已有的对象）。串池中的对象只会存在一份，也就是只会有一个“a”对象。")]),t._v(" "),a("h4",{attrs:{id:"_5-5-3-string-变量的拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-3-string-变量的拼接"}},[t._v("#")]),t._v(" 5.5.3 String 变量的拼接")]),t._v(" "),a("p",[t._v("观察下面的代码，请问输出结果是什么？")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("其实通过反编译 JVM 1.8 的指令可以看到，两个 String 变量的拼接是通过 StringBuilder 来实现的，并最终通过调用 toString 方法来生成新的字符串对象，即便 StringTable 中存在相同值的字符串，这时不会在复用 StringTable 中的 String，而是一个新对象。")]),t._v(" "),a("p",[t._v("在上面的例子中，s3 指向串池中的 “ab” 对象，s4 指向堆中的 “ab” 对象，因此"),a("strong",[t._v("这是两个不同的对象")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_5-5-4-编译期优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-4-编译期优化"}},[t._v("#")]),t._v(" 5.5.4 编译期优化")]),t._v(" "),a("p",[t._v("像下面这行代码（注意与 5.5.3 节的区别，上一节是两个变量拼接，这里是两个字面量拼接）：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这会在编译期间进行优化，使得结果已经在编译器确定为 “ab” 并存入 StringTable 中。因此下面的判等是 true：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// True")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"_5-5-5-intern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-5-intern"}},[t._v("#")]),t._v(" 5.5.5 intern")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("； "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("s.intern()")]),t._v(" 方法会尝试将字符串对象放入串池中，如果有则不会放入，如果没有则放入，且会返回串池中的对象，同时 s 调用 intern 方法后依旧指向堆中的对象。")]),t._v(" "),a("h4",{attrs:{id:"_5-5-6-stringtable-特性小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-6-stringtable-特性小结"}},[t._v("#")]),t._v(" 5.5.6 StringTable 特性小结")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("常量池中的字符串仅是符号，第一次用到时才变为对象")])]),t._v(" "),a("li",[a("p",[t._v("利用串池的机制，来避免重复创建字符串对象")])]),t._v(" "),a("li",[a("p",[t._v("字符串变量拼接的原理是 StringBuilder")])]),t._v(" "),a("li",[a("p",[t._v("字符串常量拼接的原理是编译期优化")])]),t._v(" "),a("li",[a("p",[t._v("可以使用 intern 方法，主动将串池中还没有的字符串对象放入串池")])])]),t._v(" "),a("h3",{attrs:{id:"_5-6-stringtable-性能调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-stringtable-性能调优"}},[t._v("#")]),t._v(" 5.6 StringTable 性能调优")]),t._v(" "),a("ol",[a("li",[t._v("StringTable 是一个哈希表，所以它的性能就和它的大小密切相关，所以 "),a("strong",[t._v("StringTable 调优其实就是调桶的个数")]),t._v("。桶的数量越大，就越不容易产生哈希碰撞，效率就越好。可以通过"),a("code",[t._v("-XX:StringTableSize")]),t._v(" = …进行设置。")]),t._v(" "),a("li",[t._v("考虑将字符串对象是否入池。如果要存的字符串过多并且很多重复，可以通过 intern 方法，把字符串从堆中入池，就可以减少字符串对象的个数，节约堆内存。")])]),t._v(" "),a("h2",{attrs:{id:"_6-直接内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-直接内存"}},[t._v("#")]),t._v(" 6. 直接内存")]),t._v(" "),a("h3",{attrs:{id:"_6-1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-定义"}},[t._v("#")]),t._v(" 6.1 定义")]),t._v(" "),a("p",[a("mark",[t._v("Direct Memory")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("常见于 NIO 操作时，用于数据缓冲区")]),t._v(" "),a("li",[t._v("分配回收成本较高，但读写性能高")]),t._v(" "),a("li",[t._v("不受 JVM 内存回收管理")])]),t._v(" "),a("p",[t._v("Direct Memory 也存在 OutOfMemoryError 的可能。")]),t._v(" "),a("h3",{attrs:{id:"_6-2-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-使用"}},[t._v("#")]),t._v(" 6.2 使用")]),t._v(" "),a("p",[t._v("Java 本身并不具备磁盘读写的能力，而是必须调用 OS 的函数来完成，这样 CPU 和内存的状态变化为：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230406224210547.png",alt:"image-20230406224210547"}}),t._v(" "),a("p",[t._v("上图中，由于 Java 不能运行系统缓冲区，只能将里面的内容拷贝到一个 Java 缓冲区中。这里的问题就是有两份缓冲区，造成了不必要的浪费。因此可以使用 Direct Memory，它是在系统缓冲区中划出的一块内存，但是 Java 也可以直接访问，从而"),a("strong",[t._v("相比之前减少了一次数据拷贝操作")]),t._v("。如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230406224702622.png",alt:"image-20230406224702622"}}),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo1_26")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" _1Gb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),t._v(" byteBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocateDirect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_1Gb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"分配完毕"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"开始释放"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        byteBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显式的垃圾回收，Full GC")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h3",{attrs:{id:"_6-3-释放原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-释放原理"}},[t._v("#")]),t._v(" 6.3 释放原理")]),t._v(" "),a("p",[t._v("上面在 "),a("code",[t._v("allocateDirect()")]),t._v(" 的实现方式是：")]),t._v(" "),a("ul",[a("li",[t._v("通过 "),a("code",[t._v("unsafe")]),t._v(" 对象在 "),a("code",[t._v("DirectByteBuffer")]),t._v(" 这个类对象的构造阶段分配出内存；")]),t._v(" "),a("li",[t._v("然后在这个对象的析构阶段将调用 "),a("code",[t._v("freeMemory")]),t._v(" 将内存释放掉。")])]),t._v(" "),a("blockquote",[a("p",[t._v("ByteBuffer 的实现类内部，使用了 Cleaner （虚引用）来监测 ByteBuffer 对象，一旦 ByteBuffer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过  Cleaner 的 clean 方法调用 freeMemory 来释放直接内存。")])]),t._v(" "),a("p",[t._v("因此我们通过 "),a("code",[t._v("allocateDirect()")]),t._v(" 申请的内存资源，会在垃圾回收的时候被释放掉。")]),t._v(" "),a("h3",{attrs:{id:"_6-4-禁用显式回收对直接内存的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-禁用显式回收对直接内存的影响"}},[t._v("#")]),t._v(" 6.4 禁用显式回收对直接内存的影响")]),t._v(" "),a("p",[t._v("由于 "),a("code",[t._v("System.gc()")]),t._v(" 会触发 Full GC，对性能影响比较大，因此 JVM 参数 "),a("code",[t._v("-XX:+DisableExplicitGC")]),t._v(" 可以让手动调用的 "),a("code",[t._v("System.gc()")]),t._v(" 无效。")]),t._v(" "),a("p",[t._v("如果加上这个参数，那么即使我们手动调用了 "),a("code",[t._v("System.gc()")]),t._v("，也不会直接释放掉 DirectMemory，而是要等到 DirectByteBuffer 被垃圾回收的事后才被释放。")]),t._v(" "),a("blockquote",[a("p",[t._v("当我们使用 direct memory 比较多的时候，可以直接使用 "),a("code",[t._v("unsafe")]),t._v(" 的 "),a("code",[t._v("allocateMemory()")]),t._v(" 和 "),a("code",[t._v("freeMemory()")]),t._v(" 方法来手动管理直接内存。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);