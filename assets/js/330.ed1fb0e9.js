(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{1101:function(s,a,e){"use strict";e.r(a);var t=e(22),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("blockquote",[e("p",[s._v("参考如下文章：")]),s._v(" "),e("ul",[e("li",[s._v("https://medium.com/faun/kubernetes-story-linux-namespaces-and-cgroups-what-are-containers-made-from-d544ac9bd622")]),s._v(" "),e("li",[s._v("https://zhuanlan.zhihu.com/p/585921599")]),s._v(" "),e("li",[s._v("https://zhuanlan.zhihu.com/p/159362517")]),s._v(" "),e("li",[s._v("https://time.geekbang.org/column/intro/100015201")])])]),s._v(" "),e("p",[s._v("如果我们做 DevOps，我们可能熟悉 Kubernetes、Docker 和容器。但是我们有没有想过docker到底是个什么东西？什么是容器？Docker是容器吗？Docker 不是容器，我将在这篇文章中解释它是什么。")]),s._v(" "),e("p",[s._v("这是深入容器系列的第一部分：")]),s._v(" "),e("ol",[e("li",[s._v("Linux 命名空间和 Cgroup：容器是由什么制成的？")]),s._v(" "),e("li",[s._v("深入容器运行时")]),s._v(" "),e("li",[s._v("Kubernetes 如何与容器运行时一起工作？")]),s._v(" "),e("li",[s._v("深入容器——使用 Golang 构建你自己的容器")])]),s._v(" "),e("center",[e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20221126143418916.png",alt:"image-20221126143418916"}})]),s._v(" "),e("h2",{attrs:{id:"_1-容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-容器"}},[s._v("#")]),s._v(" 1. 容器")]),s._v(" "),e("p",[s._v("容器是一种技术，它允许我们在独立的环境中运行进程，并在同一台计算机上运行其他进程。那么容器是如何做到的呢？")]),s._v(" "),e("p",[s._v("为此，容器是根据 Linux 内核的一些新特性构建的，其中两个主要特性是“namespace”和“cgroups”。")]),s._v(" "),e("h2",{attrs:{id:"_2-linux-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux-命名空间"}},[s._v("#")]),s._v(" 2. Linux 命名空间")]),s._v(" "),e("p",[s._v("这是 Linux 的一个特性，可以让我们创建类似虚拟机的东西，与虚拟机工具的功能非常相似。这个主要特征使我们的流程完全独立于其他流程。")]),s._v(" "),e("p",[s._v("Linux 命名空间有很多不同的种类：")]),s._v(" "),e("ul",[e("li",[s._v("PID 命名空间允许我们创建单独的进程。")]),s._v(" "),e("li",[s._v("网络命名空间允许我们在任何端口上运行程序，而不会与同一台计算机上运行的其他进程发生冲突。")]),s._v(" "),e("li",[s._v("Mount 命名空间允许您在不影响主机文件系统的情况下挂载和卸载文件系统。")])]),s._v(" "),e("h3",{attrs:{id:"_2-1-使用-unshare-创建一个-pid-namespace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-使用-unshare-创建一个-pid-namespace"}},[s._v("#")]),s._v(" 2.1 使用 unshare 创建一个 PID Namespace")]),s._v(" "),e("p",[s._v("创建一个 Linux 命名空间非常简单，我们使用一个名为 unshare 创建单独进程的包：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" unshare --fork --pid --mount-proc "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("它将创建一个单独的进程并将 bash shell 分配给它：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("root@VM-24-5-ubuntu:~#\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("尝试运行 "),e("code",[s._v("ps aux")]),s._v(" 命令：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("root@VM-24-5-ubuntu:~# ps aux\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot           1  0.0  0.1   7236  4000 pts/1    S    14:47   0:00 bash\nroot           9  0.0  0.1   8876  3344 pts/1    R+   14:48   0:00 ps aux\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("可以看到，在这里面执行的只由最开始的 bash 进程以及刚刚执行的 ps，而 bash 是第 1 号进程（PID=1）。")]),s._v(" "),e("p",[s._v("如果你在另一个终端上连接这个服务器并输入命令 "),e("code",[s._v("ps aux")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("root@VM-24-5-ubuntu:~# ps aux\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n...\nroot     1990031  0.0  0.0   5480   592 pts/1    S    14:47   0:00 unshare --fork --pid --mount-proc bash\n...\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("你会看到"),e("code",[s._v("unshare")]),s._v("进程正在运行，你可以认为它类似于运行"),e("code",[s._v("docker ps")]),s._v("命令时列出的容器。")]),s._v(" "),e("p",[s._v("这是怎么做到的呢？本来我们在宿主机中运行一个 bash 程序，操作系统会给它分配一个 PID，比如 PID=100。而现在 Linux Namespace 机制给这个进程施加了一个“障眼法”，让他永远看不到前面的 PID 为 1~99 的进程，这样，它就会误以为自己是这个系统的第一个进程了。")]),s._v(" "),e("p",[e("strong",[s._v("这种机制其实就是对被隔离应用的进程空间动了手脚，使得这些进程只能“看到”重新计算过得 PID，比如 PID=1")]),s._v("。可实际上，在宿主机的操作系统里，它还是原来的第 100 号进程。这种技术就是 Linux 中的 "),e("mark",[s._v("Namespace 机制")]),s._v("。")]),s._v(" "),e("p",[s._v("要退出 namespace，请键入"),e("code",[s._v("exit")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("root@VM-24-5-ubuntu:~# exit\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("现在当你在服务器上再次运行 "),e("code",[s._v("ps aux")]),s._v(" 命令时，我们会看到之前的"),e("code",[s._v("unshare")]),s._v("进程已经消失了。")]),s._v(" "),e("h3",{attrs:{id:"_2-2-使用-clone-创建-pid-namespace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-使用-clone-创建-pid-namespace"}},[s._v("#")]),s._v(" 2.2 使用 clone() 创建 PID Namespace")]),s._v(" "),e("p",[s._v("Namespace 的使用方式也非常有意思：它其实只是 Linux 创建新进程中的一个可选参数。我们知道，在 Linux 系统中创建线程的系统调用是 "),e("code",[s._v("clone()")]),s._v("，比如：")]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" pid "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("main_function"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" stack_size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SIGCHLD"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这个系统调用就会为我们创建一个新的进程，并返回它的 PID。而"),e("strong",[s._v("当我们用 clone() 创建新进程时，就可以在参数中指定 CLONE_NEWPID 参数从而创建新的进程空间")]),s._v("，比如：")]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" pid "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("main_function"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" stack_size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SIGCHLD "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" CLONE_NEWPID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这时，新创建的这个进程将会“看到”一个全新的进程空间，在这个进程空间中，它的 PID 是 1。多次执行上面的 clone 调用就会创建多个 PID Namespace。")]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("关于 PID Namespace 更多的系统调用")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("setns")]),s._v("：让进程加入已存在的 namespace")])]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setns")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nstype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("调用这个函数的进程会被加入到 fd 所代表的 namespace 中；")]),s._v(" "),e("li",[s._v("fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。")]),s._v(" "),e("li",[s._v("nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。")])]),s._v(" "),e("p",[s._v("在 docker 中，使用 docker exec 命令在已经运行着的容器中执行新的命令就需要用到 setns() 函数。")]),s._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[s._v("clone")]),s._v("：创建新的进程，并设置它的 namespace")])]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("fn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("child_stack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("C 语言的 clone() 是一个系统调用的 wrapper，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。")]),s._v(" "),e("li",[s._v("clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能，一共有 20 多种 CLONE_ 开头的 flag 参数用来控制 clone 进程的方方面面(比如是否与父进程共享虚拟内存等)。")]),s._v(" "),e("li",[s._v("fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。")]),s._v(" "),e("li",[s._v("child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程（指调用 "),e("code",[s._v("clone()")]),s._v(" 的进程）应该总是为子进程分配新的堆栈。")]),s._v(" "),e("li",[s._v("flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有 CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP。")]),s._v(" "),e("li",[s._v("arg：指向传递给 fn() 函数的参数。")])]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[s._v("unshare")]),s._v("：把当前进程移动到新的 namespace 中")])]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("unshare")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("C 语言库中的 unshare() 函数也是对 unshare() 系统调用的封装。调用 unshare() 的主要作用就是不启动新的进程就可以起到资源隔离的效果。"),e("strong",[s._v("它会创建一个新的 namespace 并把当前进程加入进去")]),s._v("。")]),s._v(" "),e("li",[s._v("系统还默认提供了一个叫 unshare 的命令，其实就是在调用 unshare() 系统调用。")]),s._v(" "),e("li",[s._v("参数的 flags 与 clone 的 flags 相同。")])])]),s._v(" "),e("h3",{attrs:{id:"_2-3-更多种类的-namespace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-更多种类的-namespace"}},[s._v("#")]),s._v(" 2.3 更多种类的 Namespace")]),s._v(" "),e("p",[s._v("除了上面刚刚用的 PID Namespace，"),e("strong",[s._v("Linux 系统还提供了 Mount、UTS、IPC、Network 和 User 这些 Namespace，用来对进程上下文施加各种“障眼法”")]),s._v("。")]),s._v(" "),e("center",[e("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20221126160548584.png",alt:"image-20221126160548584"}})]),s._v(" "),e("p",[s._v("这就是 Linux 容器的最基本的实现原理。所以，Docker 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了该进程所需要启动的一组 Namespace 参数，这样，容器就只能“看到”当前 Namespace 所限定的资源、文件、设备、状态或者配置。")]),s._v(" "),e("p",[s._v("可见，"),e("strong",[s._v("容器其实就是一种特殊的进程而已")]),s._v("。")]),s._v(" "),e("h2",{attrs:{id:"_3-cgroups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-cgroups"}},[s._v("#")]),s._v(" 3. Cgroups")]),s._v(" "),e("p",[s._v("我们可以创建一个独立于其他具有 Linux 名称空间的进程的进程。但是如果我们创建多个命名空间，那么如何限制每个命名空间的资源，使其不占用另一个命名空间的资源呢？")]),s._v(" "),e("p",[s._v("幸运的是，在 2007 年，一些人专门为我们开发了 Cgroups（Linux Control Group）。这是一项 Linux 功能，允许您限制进程的资源。Cgroups 将确定进程可以使用的 CPU 和内存的限制。")]),s._v(" "),e("center",[e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20221126164406288.png",alt:"image-20221126164406288"}})]),s._v(" "),e("center",[e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20221126164431574.png",alt:"image-20221126164431574"}})]),s._v(" "),e("p",[s._v("要创建 Cgroup，我们将使用 "),e("code",[s._v("cgcreate")]),s._v("。在使用之前"),e("code",[s._v("cgcreate")]),s._v("，我们需要安装 "),e("code",[s._v("cgroup-tools")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ubuntu / Debian")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" cgroup-tools\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CentOS")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" libcgroup\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("然后我们用下面的命令创建 Cgroups：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo cgcreate -g memory:my-process\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("这会在  /sys/fs/cgroup/memory 路径下创建一个 my-process 的文件夹，里面的文件如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ ls /sys/fs/cgroup/memory/my-process\ncgroup.clone_children               memory.memsw.failcnt\ncgroup.event_control                memory.memsw.limit_in_bytes\ncgroup.procs                        memory.memsw.max_usage_in_bytes\nmemory.failcnt                      memory.memsw.usage_in_bytes\nmemory.force_empty                  memory.move_charge_at_immigrate\nmemory.kmem.failcnt                 memory.oom_control\nmemory.kmem.limit_in_bytes          memory.pressure_level\nmemory.kmem.max_usage_in_bytes      memory.soft_limit_in_bytes\nmemory.kmem.tcp.failcnt             memory.stat\nmemory.kmem.tcp.limit_in_bytes      memory.swappiness\nmemory.kmem.tcp.max_usage_in_bytes  memory.usage_in_bytes\nmemory.kmem.tcp.usage_in_bytes      memory.use_hierarchy\nmemory.kmem.usage_in_bytes          notify_on_release\nmemory.limit_in_bytes               tasks\nmemory.max_usage_in_bytes\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("我们会看到很多文件，这些是定义进程限制的文件，我们现在感兴趣的文件是 "),e("code",[s._v("memory.kmem.limit_in_bytes")]),s._v("，它会定义一个进程的内存限制，数值以字节为单位。例如，我们将创建一个内存限制为 50Mi 的进程：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo echo 50000000 >  /sys/fs/cgroup/memory/my-process/memory.limit_in_bytes\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("然后运行下面的命令使用 Cgroup：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yubin@VM-24-5-ubuntu:~$ sudo cgexec -g memory:my-process bash\n[sudo] password for yubin: \nroot@VM-24-5-ubuntu:/home/yubin#\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("现在 Cgroup 创建的进程内存将会被限制为 50Mi。")]),s._v(" "),e("h2",{attrs:{id:"_4-带命名空间的-cgroups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-带命名空间的-cgroups"}},[s._v("#")]),s._v(" 4. 带命名空间的 Cgroups")]),s._v(" "),e("p",[s._v("现在，我们可以使用带有命名空间的 Cgroups 来创建一个独立的进程并限制它可以使用的资源。")]),s._v(" "),e("p",[s._v("例如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("sudo cgexec -g memory:my-process unshare --fork --pid --mount-proc bash\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("运行结果：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('yubin@VM-24-5-ubuntu:~$ sudo cgexec -g memory:my-process unshare --fork --pid --mount-proc bash\nroot@VM-24-5-ubuntu:/home/yubin# echo "Hello from in a container"\nHello from in a container\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("所以，容器是 cgroups 和 namespace 这两个特性的组合，虽然实际上它可能还有一些其他的东西，但基本上 cgroups 和 namespace 是两个主要的特性。")]),s._v(" "),e("h2",{attrs:{id:"_5-union-file-system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-union-file-system"}},[s._v("#")]),s._v(" 5. Union File System")]),s._v(" "),e("center",[e("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/v2-ad905d7d87b73ff9d42804e4a6df66c1_720w.webp",alt:"img"}})]),s._v(" "),e("p",[s._v("Union File System， 联合文件系统：将多个不同位置的目录联合挂载(union mount)到同一个目录下。")]),s._v(" "),e("ul",[e("li",[s._v("Docker 利用联合挂载能力，将容器镜像里的多层内容呈现为统一的 Rootfs（根文件系统）。")]),s._v(" "),e("li",[s._v("Rootfs 打包整个操作系统的文件和目录，是应用运行所需要的最完整的“依赖库”。")])]),s._v(" "),e("h2",{attrs:{id:"_6-什么是-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是-docker"}},[s._v("#")]),s._v(" 6. 什么是 Docker")]),s._v(" "),e("p",[s._v("那么什么是docker？Docker 只是一个帮助我们与底层容器技术交互的工具。更准确的说，Docker帮助我们轻松创建容器，而不需要我们做很多事情。"),e("strong",[s._v("Docker 项目最核心的原理实际上就是为待创建的用户进程做以下工作")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("启动 Linux Namespace 配置；")]),s._v(" "),e("li",[s._v("设置指定的 Cgroups 参数；")]),s._v(" "),e("li",[s._v("在 mount namespace 下切换进程的根目录（change root）；")])]),s._v(" "),e("p",[s._v("这样，一个完整的容器就诞生了。不过 Docker 项目在最后一步的切换上会优先使用 pivot_root 系统调用，如果系统不支持才会使用 chroot。虽然这两个系统调用功能类似，但也有细微区别。")]),s._v(" "),e("p",[s._v("为了与容器交互，Docker 使用容器运行时（container runtime）。我们将在下一篇文章中讨论它。")])],1)}),[],!1,null,null,null);a.default=n.exports}}]);