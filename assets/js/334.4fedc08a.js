(window.webpackJsonp=window.webpackJsonp||[]).push([[334],{1106:function(e,s,a){"use strict";a.r(s);var t=a(22),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("blockquote",[a("p",[e._v("参考："),a("a",{attrs:{href:"https://time.geekbang.org/column/intro/100114501?tab=catalog",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes 入门实战课 | 极客时间"),a("OutboundLink")],1),e._v(" 第 1-8 讲")])]),e._v(" "),a("h2",{attrs:{id:"_1-初识-docker-万事开头难"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-初识-docker-万事开头难"}},[e._v("#")]),e._v(" 1. 初识 Docker：万事开头难")]),e._v(" "),a("h3",{attrs:{id:"_1-1-docker-的形态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-docker-的形态"}},[e._v("#")]),e._v(" 1.1 Docker 的形态")]),e._v(" "),a("p",[e._v("目前使用 Docker 基本有两个选择——Docker Desktop 和 Docker Engine：")]),e._v(" "),a("ul",[a("li",[e._v("Docker Desktop：专门针对个人使用而设计，支持 Mac 和 Windows 的快速安装，并具有直观的图形界面，但仅限个人使用，不能商用。")]),e._v(" "),a("li",[e._v("Docker Engine：完全免费，只能在 Linux 中运行，血脉最纯正。")])]),e._v(" "),a("p",[e._v("如无特别说明，本专栏接下来所说的 Docker 指的都是 Docker Engine。")]),e._v(" "),a("h3",{attrs:{id:"_1-2-docker-的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker-的安装"}},[e._v("#")]),e._v(" 1.2 Docker 的安装")]),e._v(" "),a("ul",[a("li",[e._v("首先安装 docker："),a("code",[e._v("sudo apt install docker.io")])]),e._v(" "),a("li",[e._v("然后启动 Docker 服务："),a("code",[e._v("sudo service docker start")]),e._v(" "),a("ul",[a("li",[e._v("这一步就是启动 Docker 的后台服务")])])]),e._v(" "),a("li",[e._v("然后将当前用户加入 docker 组："),a("code",[e._v("sudo usermod -aG docker ${USER}")]),e._v(" "),a("ul",[a("li",[e._v("这一步是把当前的用户加入Docker的用户组。这是因为操作Docker必须要有root权限，而直接使用root用户不够安全，"),a("strong",[e._v("加入Docker用户组是一个比较好的选择，这也是Docker官方推荐的做法")]),e._v("。")])])])]),e._v(" "),a("p",[e._v("上述命令执行完后，我们需要退出系统（"),a("code",[e._v("exit")]),e._v("），然后再重新登陆一次，这样才能让修改用户组的命令 "),a("code",[e._v("usermod")]),e._v(" 生效。")]),e._v(" "),a("p",[e._v("可以通过 "),a("code",[e._v("docker version")]),e._v(" 和 "),a("code",[e._v("docker info")]),e._v(" 来验证是否安装成功。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("docker version")]),e._v(" 会输出 Docker 客户端和服务器各自的版本信息")]),e._v(" "),a("li",[a("code",[e._v("docker info")]),e._v(" 会显示当前 Docker 系统相关的信息，例如CPU、内存、容器数量、镜像数量、容器运行时、存储文件系统等等")])]),e._v(" "),a("h3",{attrs:{id:"_1-3-docker-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-docker-的使用"}},[e._v("#")]),e._v(" 1.3 Docker 的使用")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("docker ps")]),e._v("：列出当前系统中正在运行的容器，加上 "),a("code",[e._v("-a")]),e._v(" 就可以看到所有已运行完毕的容器")]),e._v(" "),a("li",[a("code",[e._v("docker pull")]),e._v("：拉取 docker image")]),e._v(" "),a("li",[a("code",[e._v("docker images")]),e._v("：列出当前 Docker 所存储的所有 images")]),e._v(" "),a("li",[a("code",[e._v("docker run")]),e._v("：从 image 启动 container")])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Docker 使用 busybox")]),e._v(" "),a("p",[e._v("busybox 是一个小巧精致的“工具箱”，把诸多 Linux 命令整合在一个可执行文件里，体积一般不超过 2MB，非常适合测试任务或嵌入式系统。")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull busybox  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 拉取busybox镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run busybox "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" hello world\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])]),e._v(" "),a("h3",{attrs:{id:"_1-4-docker-的架构简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-docker-的架构简介"}},[e._v("#")]),e._v(" 1.4 Docker 的架构简介")]),e._v(" "),a("p",[e._v("下图是 Docker 官网的一张图，描述了 Docker Engine 的内部角色和工作流程：")]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230420212225.png",alt:"20230420212225"}})]),e._v(" "),a("p",[e._v("刚才我们敲的命令行 "),a("code",[e._v("docker")]),e._v(" 实际上是一个客户端 client，它会与 Docker Engine 里的后台服务 Docker daemon 通信，而镜像则存储在远端的仓库 Registry 里，客户端并不能直接访问镜像仓库。")]),e._v(" "),a("p",[e._v("Docker client可以通过 "),a("code",[e._v("build")]),e._v("、 "),a("code",[e._v("pull")]),e._v("、 "),a("code",[e._v("run")]),e._v(" 等命令向Docker daemon发送请求，而Docker daemon则是容器和镜像的“大管家”，负责从远端拉取镜像、在本地存储镜像，还有从镜像生成容器、管理容器等所有功能。所以，在Docker Engine里，"),a("strong",[e._v("真正干活的其实是默默运行在后台的Docker daemon，而我们实际操作的命令行工具“docker”只是个“传声筒”的角色")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"_2-被隔离的进程-一起来看看容器的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-被隔离的进程-一起来看看容器的本质"}},[e._v("#")]),e._v(" 2. 被隔离的进程：一起来看看容器的本质")]),e._v(" "),a("p",[e._v("广义上来说，容器技术是动态的容器、静态的镜像和远端的仓库这三者的组合。今天就来看看究竟什么是容器（即狭义的、动态的容器）。")]),e._v(" "),a("h3",{attrs:{id:"_2-1-容器到底是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-容器到底是什么"}},[e._v("#")]),e._v(" 2.1 容器到底是什么")]),e._v(" "),a("p",[e._v("容器封装了运行中的进程，并把进程与外界环境隔离开，让进程与外部系统互不影响。它就是一个特殊的隔离环境，它能够让进程只看到这个环境里的有限信息，不能对外界环境施加影响。")]),e._v(" "),a("p",[e._v("容器技术的另一个本领就是为应用程序"),a("strong",[e._v("加上资源隔离")]),e._v("，在系统里切分出一部分资源，让它只能使用指定的配额。这可以避免容器内进程的过渡系统消耗，并充分利用计算机硬件，让有限的资源能够提供稳定可靠的服务。")]),e._v(" "),a("h3",{attrs:{id:"_2-2-隔离是怎么实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-隔离是怎么实现的"}},[e._v("#")]),e._v(" 2.2 隔离是怎么实现的")]),e._v(" "),a("p",[e._v("奥秘在于 Linux 内核所提供的三个技术：namespace、cgroup 和 chroot，虽然这三个技术的初衷都不是为了实现容器，但结合在一起就会发生奇妙的”化学反应“。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("namespace")]),e._v("：它可以创建出独立的文件系统、主机名、进程号、网络等资源空间，相当于给进程盖了一间小板房，这样就实现了系统全局资源和进程局部资源的隔离。")]),e._v(" "),a("li",[a("strong",[e._v("cgroup")]),e._v("：全称是 Linux Control Group，用来实现对进程的 CPU、内存等资源的优先级和配额限制，相当于给进程的小板房加了一个天花板。")]),e._v(" "),a("li",[a("strong",[e._v("chroot")]),e._v("：它可以更改进程的根目录，也就是限制访问文件系统，相当于给进程的小板房铺上了地砖。")])]),e._v(" "),a("p",[e._v("综合运用以上三个技术，一个四四方方、具有完善的隔离特性的容器就此出现了，进程也就可以搬进去快乐生活啦。")]),e._v(" "),a("blockquote",[a("p",[e._v("目前容器技术基本不再使用古老的 chroot 了，而是改用 pivot_root。")])]),e._v(" "),a("h3",{attrs:{id:"_2-3-容器的常见操作命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-容器的常见操作命令"}},[e._v("#")]),e._v(" 2.3 容器的常见操作命令")]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"85%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422145651.png",alt:"20230422145651"}})]),e._v(" "),a("h2",{attrs:{id:"_3-如何编写正确、高效的-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何编写正确、高效的-dockerfile"}},[e._v("#")]),e._v(" 3. 如何编写正确、高效的 Dockerfile")]),e._v(" "),a("p",[e._v("这一大节来讲解镜像的内部机制，还有高效、正确地编写 Dockerfile 制作容器镜像的方法。")]),e._v(" "),a("h3",{attrs:{id:"_3-1-镜像的内部机制-分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-镜像的内部机制-分层"}},[e._v("#")]),e._v(" 3.1 镜像的内部机制：分层")]),e._v(" "),a("p",[e._v("镜像就是一个打包文件，里面包含了应用程序及依赖环境，例如文件系统（fs）、env 以及 config params 等。这里面真正麻烦的是 fs，为了保证容器运行环境的一致性，镜像必须把 rootfs 都包含进来。")]),e._v(" "),a("p",[e._v("尽管 image 中不包含系统内核（因为 containers 共享了宿主机内核），但如果每个 image 都这样重复打包，会产生大量冗余（比如 1000 个 image 可能会有 1000 个 Ubuntu rootfs），对磁盘存储和网络传输都是很大的浪费。很自然地，我们可以想到应该把重复的部分抽取出来，也就是只存一份 Ubuntu rootfs，然后让所有基于此的 image 都共享这部分数据。这个思路就是 container image 的一个重大创新点："),a("mark",[e._v("分层")]),e._v("（"),a("strong",[e._v("Layer")]),e._v("）。")]),e._v(" "),a("p",[e._v("容器镜像内部并不是一个平坦的结构，而是由许多的镜像层组成的，每层都是只读不可修改的一组文件，相同的层可以在镜像之间共享，然后多个层像搭积木一样堆叠起来，再使用一种叫“"),a("strong",[e._v("Union FS 联合文件系统")]),e._v("”的技术把它们合并在一起，就形成了容器最终看到的文件系统：")]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422151448.png",alt:"20230422151448"}})]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("docker inspect nginx:alpine")]),e._v(" 可以看到镜像的分层信息，在输出的”RootFS“部分：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" inspect nginx:alpine\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"RootFS"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"layers"')]),e._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Layers"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sha256:9d982e0ac7aee7e383989508c9b7175fae67221f80323067252a0442c632a67f"')]),e._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sha256:2ec9d5e75f88b8fa7403e3c42d85194c2bf6b9cc7f93c84e2fdd1949927a7eb5"')]),e._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sha256:52207ccd9e991181a2faebabaf7530e57a14221460f841c820874d90acb0b29a"')]),e._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sha256:33dba95a3cfec929519ae7232359c2212eb68d807c663f3adf807e3d635850e0"')]),e._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sha256:42939f4641510d4b8c971124cd0a8f644e9b48934dbb5c689aa010a5169ecb0e"')]),e._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sha256:6003157f5511d91798b880a6309a7d674c2e4978f6b79a1c24f0225344aa4811"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("ul",[a("li",[e._v("从上例可以看到，nginx:alpine 镜像里一共有 6 个 layer。")])]),e._v(" "),a("p",[e._v("当你 docker pull 下载镜像时，Docker 会检查是否有重复的层，如果本地已存在就不会重复下载；同样在 docekr rmi 时如果 layer 被其他镜像共享的话，也不会被删除。")]),e._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[e._v("笔记")]),e._v(" "),a("p",[e._v("重点理解好："),a("strong",[e._v("容器镜像是由多个只读的Layer构成的，同一个Layer可以被不同的镜像共享")]),e._v("，减少了存储和传输的成本。")])]),e._v(" "),a("h3",{attrs:{id:"_3-2-dockerfile-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-dockerfile-是什么"}},[e._v("#")]),e._v(" 3.2 Dockerfile 是什么")]),e._v(" "),a("p",[e._v("Dockerfile 就是一个纯文本，里面记录了一系列的构建指令，"),a("strong",[e._v("每个指令都会生成一个 layer")]),e._v("，Docker 会顺序执行这些指令并最终创建出一个新的 image 出来。")]),e._v(" "),a("p",[e._v("下面是一个 Dockerfile 示例：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Dockerfile.busybox")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" busybox                  # 选择基础镜像")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello world"')]),e._v("        # 启动容器时默认运行的命令")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("然后可以使用 "),a("code",[e._v("docker build")]),e._v(" 来创建镜像：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -f Dockerfile.busybox "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n\nSending build context to Docker daemon   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v(".68kB\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("/2 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" FROM busybox\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" d38589532d97\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("/2 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" CMD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello world"')]),e._v("\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Running "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" c5a762edd1c8\nRemoving intermediate container c5a762edd1c8\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" b61882f42db7\nSuccessfully built b61882f42db7\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("ul",[a("li",[a("code",[e._v("-f")]),e._v(" 参数指定 Dockerfile 文件名")]),e._v(" "),a("li",[e._v("最后需要跟一个文件路径，叫做"),a("mark",[e._v("构建上下文")]),e._v("（build’s context）。这里只有一个简答的点号，表示当前路径的意思。")])]),e._v(" "),a("h3",{attrs:{id:"_3-3-怎样编写正确、高效的-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-怎样编写正确、高效的-dockerfile"}},[e._v("#")]),e._v(" 3.3 怎样编写正确、高效的 Dockerfile")]),e._v(" "),a("p",[e._v("这里讲一下编写 Dockerfile 的一些常用指令和最佳实践。")]),e._v(" "),a("h4",{attrs:{id:"_1-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-from"}},[e._v("#")]),e._v(" 1）FROM")]),e._v(" "),a("p",[e._v("首先因为构建镜像的第一条指令必须是 "),a("code",[e._v("FROM")]),e._v("，所以基础镜像的选择非常关键。如果关注的是镜像的安全和大小，那么一般会选择 Alpine；如果关注的是应用的运行稳定性，那么可能会选择 Ubuntu、Debian、CentOS。")]),e._v(" "),a("h4",{attrs:{id:"_2-copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-copy"}},[e._v("#")]),e._v(" 2）COPY")]),e._v(" "),a("p",[e._v("然后可以使用 "),a("code",[e._v("COPY")]),e._v(" 命令将构建上下文中的一些文件打包到镜像中。注意，不能使用构建上下文之外的文件。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" ./a.txt  /tmp/a.txt    # 把构建上下文里的a.txt拷贝到镜像的/tmp目录")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" /etc/hosts  /tmp       # 错误！不能使用构建上下文之外的文件")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h4",{attrs:{id:"_3-run、arg-和-env"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-run、arg-和-env"}},[e._v("#")]),e._v(" 3）RUN、ARG 和 ENV")]),e._v(" "),a("p",[a("code",[e._v("RUN")]),e._v(" 命令可以执行任意的 shell 命令，比如更新系统、安装应用、下载文件、创建目录、编译程序等等，实现任意的镜像构建步骤，非常灵活。")]),e._v(" "),a("p",[a("code",[e._v("RUN")]),e._v(" 通常会是Dockerfile里最复杂的指令，会包含很多的Shell命令，但Dockerfile里一条指令只能是一行，所以有的 "),a("code",[e._v("RUN")]),e._v(" 指令会在每行的末尾使用续行符 "),a("code",[e._v("\\")]),e._v("，命令之间也会用 "),a("code",[e._v("&&")]),e._v(" 来连接，这样保证在逻辑上是一行，就像下面这样：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && apt-get install -y "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n        build-essential "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n        curl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n        make "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n        unzip "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && cd /tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && curl -fSL xxx.tar.gz -o xxx.tar.gz"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && tar xzf xxx.tar.gz "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && cd xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && ./config "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && make "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && make clean")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("有的时候在Dockerfile里写这种超长的 "),a("code",[e._v("RUN")]),e._v(" 指令很不美观，而且一旦写错了，每次调试都要重新构建也很麻烦，所以你可以采用一种变通的技巧："),a("strong",[e._v("把这些Shell命令集中到一个脚本文件里，用 "),a("code",[e._v("COPY")]),e._v(" 命令拷贝进去再用 "),a("code",[e._v("RUN")]),e._v(" 来执行")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" setup.sh  /tmp/                # 拷贝脚本到/tmp目录")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" cd /tmp && chmod +x setup.sh \\  # 添加执行权限")]),e._v("\n    && ./setup.sh && rm setup.sh    # 运行脚本然后再删除\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[a("code",[e._v("RUN")]),e._v(" 指令实际上就是Shell编程，如果你对它有所了解，就应该知道它有变量的概念，可以实现参数化运行，这在 Dockerfile 里也可以做到，需要使用两个指令 "),a("code",[e._v("ARG")]),e._v(" 和 "),a("code",[e._v("ENV")]),e._v("：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("ARG")]),e._v("：它创建的变量只在镜像构建过程中可见，容器运行时不可见")]),e._v(" "),a("li",[a("strong",[e._v("ENV")]),e._v("：它创建的变量不仅能够在构建镜像的过程中使用，在容器运行时也能够以环境变量的形式被应用程序使用")])]),e._v(" "),a("h4",{attrs:{id:"_4-expose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-expose"}},[e._v("#")]),e._v(" 4）EXPOSE")]),e._v(" "),a("p",[e._v("它用来声明容器对外服务的端口号：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("EXPOSE")]),e._v(" 443           # 默认是 tcp 协议")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("EXPOSE")]),e._v(" 53/udp        # 可以指定 udp 协议")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("讲了这些 Dockerfile 指令之后，我还要特别强调一下，因为每个指令都会生成一个镜像层，所以 "),a("strong",[e._v("Dockerfile 里最好不要滥用指令，尽量精简合并，否则太多的层会导致镜像臃肿不堪")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_3-4-docker-build-是怎么工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-docker-build-是怎么工作的"}},[e._v("#")]),e._v(" 3.4 docker build 是怎么工作的？")]),e._v(" "),a("p",[e._v("“构建上下文”是什么意思呢？")]),e._v(" "),a("p",[e._v("因为命令行 "),a("code",[e._v("docker")]),e._v(" 只是一个简单的客户端，真正的镜像构建工作是由服务端的 Docker daemon 来完成的，所以 "),a("code",[e._v("docker")]),e._v(" 客户端就只能"),a("strong",[e._v("把构建上下文目录打包上传")]),e._v("（显示信息 "),a("code",[e._v("Sending build context to Docker daemon")]),e._v(" ），这样服务器才能够获取本地的这些文件。")]),e._v(" "),a("p",[e._v("但把构建上下文打包的过程可能会把一些无用的文件（比如 README、.git 等）也拷贝进镜像了，为避免这个文件，你可以在构建上下文目录中建一个 "),a("strong",[e._v(".dockerignore")]),e._v(" 文件，语法与 .gitignore 类似，用来排除掉那些不需要的文件。")]),e._v(" "),a("p",[e._v("下面是一个简单的示例，表示不打包上传后缀是“swp”“sh”的文件：")]),e._v(" "),a("div",{staticClass:"language-docekrignore line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# docker ignore\n*.swp\n*.sh\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("另外关于Dockerfile，一般应该在命令行里使用 "),a("code",[e._v("-f")]),e._v(" 来显式指定。但如果省略这个参数， "),a("code",[e._v("docker build")]),e._v(" 就会在当前目录下找名字是 "),a("code",[e._v("Dockerfile")]),e._v(" 的文件。所以，如果只有一个构建目标的话，文件直接叫“Dockerfile”是最省事的。")]),e._v(" "),a("p",[e._v("在构建时，也可以加一个 "),a("code",[e._v("-t")]),e._v(" 参数，也就是指定镜像的 tag，这样 Docker 在"),a("strong",[e._v("构建完成后会自动给镜像添加名字")]),e._v("。当然，名字必须要符合上节课里的命名规范，用 "),a("code",[e._v(":")]),e._v(" 分隔名字和标签，如果不提供标签默认就是“latest”。")]),e._v(" "),a("blockquote",[a("p",[e._v("关于镜像的构建，还有很多高级技巧等待你去探索，比如使用缓存、多阶段构建等等，你可以再参考 "),a("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker 官方文档"),a("OutboundLink")],1),e._v("，或者一些知名应用的镜像（如 Nginx、Redis、Node.js 等）进一步学习。")])]),e._v(" "),a("h3",{attrs:{id:"_3-5-课外小贴士"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-课外小贴士"}},[e._v("#")]),e._v(" 3.5 课外小贴士")]),e._v(" "),a("ul",[a("li",[e._v("我们也可以使用命令“docker commit”从运行中的容器直接生成镜像，但这样不具有 Dockerfle“ 文档化的优点，一般不推荐使用。")]),e._v(" "),a("li",[e._v("Docker 镜像遵循的是 OCI (Open Container Initi-atve)标准，所以"),a("strong",[e._v("制作出来的镜像文件也能够被其他的容器技术")]),e._v(" (如 Kata、Kubernetes) 识别并运行。")]),e._v(" "),a("li",[e._v("Union FS 有 多 种实 现，例 如 aufs、btrfs、de-vice-mapper 等，目前 Docker 使用的是 overlay2，可以在“docker info”中查看。")]),e._v(" "),a("li",[e._v("在 Dockerfle 里还可以使用另一个与“COPY”很类似的“ADD”指令，它不仅能够拷贝文件，还支持下载和自动解压缩，但过多的操作让它的含义比较模糊，不容易控制，个人不推荐使用。")]),e._v(" "),a("li",[e._v("“ENTRYPOINT”是一个与“CMD”类似的指令，也可以定义启动命令，相当于“docker run xxx ENTRY-POINT CMD”，不过没有“CMD”常用。")]),e._v(" "),a("li",[e._v("可以使用“docker history”命令回放完整的镜像的构建过程，有的时候对于镜像排错很有用。")])]),e._v(" "),a("h2",{attrs:{id:"_4-该怎样用好-docker-hub-这个宝藏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-该怎样用好-docker-hub-这个宝藏"}},[e._v("#")]),e._v(" 4. 该怎样用好 Docker Hub 这个宝藏")]),e._v(" "),a("p",[e._v("镜像文件该如何管理呢？")]),e._v(" "),a("h3",{attrs:{id:"_4-1-registry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-registry"}},[e._v("#")]),e._v(" 4.1 Registry")]),e._v(" "),a("p",[e._v("镜像仓库 Registry 就是所有镜像都在这里登记保管，就像是一个巨大的档案馆。docker pull 命令就是让 Docker daemon 去 Registry 下载镜像。Registry 除了提供拉取镜像的功能外，还提供了上传、查询、删除等多个功能。")]),e._v(" "),a("h3",{attrs:{id:"_4-2-docker-hub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-docker-hub"}},[e._v("#")]),e._v(" 4.2 Docker Hub")]),e._v(" "),a("p",[e._v("默认的镜像仓库就是 "),a("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),a("OutboundLink")],1),e._v("，它是官方 Registry 服务。里面不仅有 Docker 自己打包的镜像，而且还对公众免费开放。")]),e._v(" "),a("h3",{attrs:{id:"_4-3-如何在-docker-hub-上挑选镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-如何在-docker-hub-上挑选镜像"}},[e._v("#")]),e._v(" 4.3 如何在 Docker Hub 上挑选镜像")]),e._v(" "),a("p",[e._v("在Docker Hub上有"),a("strong",[e._v("官方镜像")]),e._v("、"),a("strong",[e._v("认证镜像")]),e._v(" 和"),a("strong",[e._v("非官方镜像")]),e._v("的区别。")]),e._v(" "),a("ul",[a("li",[e._v("官方镜像：由 Docker 公司提供，经过了严格的漏洞扫描和安全检测，支持x86_64、arm64等多种硬件架构，还具有清晰易读的文档，一般来说是我们构建镜像的首选，也是我们编写Dockerfile的最佳范例。这种镜像会有一个“Official image”的标记。")]),e._v(" "),a("li",[e._v("认证镜像：有一个“Verified publisher”的标记，就是认证发行商，比如Bitnami、Rancher、Ubuntu等。它们都是颇具规模的大公司，类似于微博的“大V”。")]),e._v(" "),a("li",[e._v("非官方镜像：有一种是“半官方镜像”，因为经过 Docker 认证是要交钱的，很多公司不想交钱，就没有经过认证，但这类也比较可靠。剩下的就是民间镜像了，这类往往由于条件所限，质量难以保证。")])]),e._v(" "),a("p",[e._v("除了查看镜像是否为官方认证，我们还应该再结合其他的条件来判断镜像质量是否足够好。做法和GitHub差不多，就是看它的"),a("strong",[e._v("下载量、星数、还有更新历史")]),e._v("，简单来说就是“好评”数量。最好还是随大流。")]),e._v(" "),a("p",[e._v("Dockerhub 上镜像的命名方式是“用户名/应用名”的形式，比如 "),a("code",[e._v("ubuntu/nginx")]),e._v(" 等。所以，我们在使用 "),a("code",[e._v("docker pull")]),e._v(" 下载这些非官方镜像的时候，就必须把用户名也带上，否则默认就会使用官方镜像。")]),e._v(" "),a("h3",{attrs:{id:"_4-4-docker-hub-上镜像命名的规则是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-docker-hub-上镜像命名的规则是什么"}},[e._v("#")]),e._v(" 4.4 Docker Hub 上镜像命名的规则是什么")]),e._v(" "),a("p",[e._v("镜像还存在许多版本，也就多个 tag。直接使用默认的“latest”虽然简单方便，但在生产环境里是一种非常不负责任的做法，会导致版本不可控。所以我们还需要理解Docker Hub上标签命名的含义，才能够挑选出最适合我们自己的镜像版本。")]),e._v(" "),a("p",[e._v("下面拿官方的Redis镜像作为例子，解释一下这些标签都是什么意思。")]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422163445.png",alt:"20230422163445"}})]),e._v(" "),a("p",[e._v("通常来说，镜像标签的格式是 "),a("strong",[e._v("应用的版本号加上操作系统")]),e._v("。")]),e._v(" "),a("p",[e._v("版本号你应该比较了解吧，基本上都是 "),a("strong",[e._v("主版本号+次版本号+补丁号")]),e._v(" 的形式，有的还会在正式发布前出rc版（候选版本，release candidate）。而操作系统的情况略微复杂一些，因为各个Linux发行版的命名方式“花样”太多了。")]),e._v(" "),a("p",[e._v("Alpine、CentOS的命名比较简单明了，就是数字的版本号，像这里的 "),a("code",[e._v("alpine3.15")]),e._v(" ，而Ubuntu、Debian则采用了代号的形式。比如Ubuntu 18.04是 "),a("code",[e._v("bionic")]),e._v("，Ubuntu 20.04是 "),a("code",[e._v("focal")]),e._v("，Debian 9是 "),a("code",[e._v("stretch")]),e._v("，Debian 10是 "),a("code",[e._v("buster")]),e._v("，Debian 11是 "),a("code",[e._v("bullseye")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("另外，有的标签还会加上 "),a("code",[e._v("slim")]),e._v("、 "),a("code",[e._v("fat")]),e._v("，来进一步表示这个镜像的内容是经过精简的，还是包含了较多的辅助工具")]),e._v("。通常 "),a("code",[e._v("slim")]),e._v(" 镜像会比较小，运行效率高，而 "),a("code",[e._v("fat")]),e._v(" 镜像会比较大，适合用来开发调试。")]),e._v(" "),a("p",[e._v("下面我就列出几个标签的例子来说明一下。")]),e._v(" "),a("ul",[a("li",[e._v("nginx:1.21.6-alpine，表示版本号是1.21.6，基础镜像是最新的Alpine。")]),e._v(" "),a("li",[e._v("redis:7.0-rc-bullseye，表示版本号是7.0候选版，基础镜像是Debian 11。")]),e._v(" "),a("li",[e._v("node:17-buster-slim，表示版本号是17，基础镜像是精简的Debian 10。")])]),e._v(" "),a("h3",{attrs:{id:"_4-5-离线环境该怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-离线环境该怎么办"}},[e._v("#")]),e._v(" 4.5 离线环境该怎么办")]),e._v(" "),a("p",[e._v("Docker 提供了：")]),e._v(" "),a("ul",[a("li",[e._v("save 命令将 image 导出为压缩包："),a("code",[e._v("docker save ngx-app:latest -o ngx.tar")])]),e._v(" "),a("li",[e._v("load 命令从压缩包导入 Docker："),a("code",[e._v("docker load -i ngx.tar")]),e._v(" 或 "),a("code",[e._v("docker load --input ngx.tar")])])]),e._v(" "),a("h3",{attrs:{id:"_4-6-课后小贴士"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-课后小贴士"}},[e._v("#")]),e._v(" 4.6 课后小贴士")]),e._v(" "),a("ul",[a("li",[e._v("由于 Docker Hub 服务器在国外，国内访问会比较慢所以就出现了不少镜像加速网站，可以在“/etc/dock-er/daemon.json”里配置。但不知道出于什么原因，近几年很多网站都停止了这项服务，十分可惜。")]),e._v(" "),a("li",[e._v("虽然 Docker Hub 一家独大，但市面上仍然有其他的竞争者，它们不甘心“ 寄人篱下 ”，就自己开了独立的镜像仓库，典型的有 Red Hat 的 quay.io、Google 的gcr.io、还有 GitHub 的 ghcr.io。")]),e._v(" "),a("li",[e._v("Docker 官方镜像也有用户名，就是“library”，例如“library/nginx”，但一般都省略不写。")]),e._v(" "),a("li",[e._v("我们也可以用命令行 "),a("code",[e._v("docker search")]),e._v(" 来快速查找 Docker Hub 里的镜像。")])]),e._v(" "),a("h2",{attrs:{id:"_5-打破次元壁-容器该如何与外界互联互通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-打破次元壁-容器该如何与外界互联互通"}},[e._v("#")]),e._v(" 5. 打破次元壁：容器该如何与外界互联互通")]),e._v(" "),a("p",[e._v("这一大节讲讲有哪些手段能够在容器与外部系统之间沟通交流。")]),e._v(" "),a("h3",{attrs:{id:"_5-1-如何拷贝容器内的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-如何拷贝容器内的数据"}},[e._v("#")]),e._v(" 5.1 如何拷贝容器内的数据")]),e._v(" "),a("p",[e._v("docker cp 命令可以在宿主机和容器之间拷贝文件：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" a.txt 062:/tmp  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 外界 -> 容器内")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" 062:/tmp/a.txt ./b.txt  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 容器内 -> 外界")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h3",{attrs:{id:"_5-2-如何共享主机上的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-如何共享主机上的文件"}},[e._v("#")]),e._v(" 5.2 如何共享主机上的文件")]),e._v(" "),a("p",[e._v("挂载 volume 即可。在 docker run 命令运行时，指定 "),a("code",[e._v("-v")]),e._v(" 参数，格式是 “宿主机路径:容器内路径”，代表让容器宿主机的某个目录。")]),e._v(" "),a("h3",{attrs:{id:"_5-3-如何实现网络互通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-如何实现网络互通"}},[e._v("#")]),e._v(" 5.3 如何实现网络互通")]),e._v(" "),a("p",[e._v("网络互通的关键在于“打通”容器内外的网络，而处理网络通信无疑是计算机系统里最棘手的工作之一，有许许多多的名词、协议、工具，在这里我也没有办法一下子就把它都完全说清楚，所以只能从“宏观”层面讲个大概，帮助你快速理解。")]),e._v(" "),a("p",[e._v("Docker提供了三种网络模式，分别是 "),a("strong",[e._v("null")]),e._v("、 "),a("strong",[e._v("host")]),e._v(" 和 "),a("strong",[e._v("bridge")]),e._v("：")]),e._v(" "),a("h4",{attrs:{id:"_1-null-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-null-模式"}},[e._v("#")]),e._v(" 1）null 模式")]),e._v(" "),a("p",[a("strong",[e._v("null")]),e._v(" 是最简单的模式，也就是没有网络，但允许其他的网络插件来自定义网络连接，这里就不多做介绍了。")]),e._v(" "),a("h4",{attrs:{id:"_2-host-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-host-模式"}},[e._v("#")]),e._v(" 2）host 模式")]),e._v(" "),a("p",[a("strong",[e._v("host")]),e._v(" 的意思是直接使用宿主机网络，相当于去掉了容器的网络隔离（其他隔离依然保留），所有的容器会共享宿主机的IP地址和网卡。这种模式没有中间层，自然通信效率高，但缺少了隔离，运行太多的容器也容易导致端口冲突。")]),e._v(" "),a("p",[e._v("host 模式需要在 "),a("code",[e._v("docker run")]),e._v(" 时使用 "),a("code",[e._v("--net=host")]),e._v(" 参数，下面我就用这个参数启动 Nginx：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -d --rm --net"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("host nginx:alpine\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("为了验证效果，我们可以在本机和容器里分别执行 "),a("code",[e._v("ip addr")]),e._v(" 命令，查看网卡信息：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v(" addr                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 本机查看网卡")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" xxx "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v(" addr    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 容器查看网卡")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422164827.png",alt:"20230422164827"}})]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422164841.png",alt:"20230422164841"}})]),e._v(" "),a("p",[e._v("可以看到这两个 "),a("code",[e._v("ip addr")]),e._v(" 命令的输出信息是完全一样的，比如都是一个网卡ens160，IP地址是“192.168.10.208”，这就证明Nginx容器确实与本机共享了网络栈。")]),e._v(" "),a("h4",{attrs:{id:"_3-bridge-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-bridge-模式"}},[e._v("#")]),e._v(" 3）bridge 模式")]),e._v(" "),a("p",[e._v("第三种 "),a("strong",[e._v("bridge")]),e._v("，也就是桥接模式，它有点类似现实世界里的交换机、路由器，只不过是由软件虚拟出来的，容器和宿主机再通过虚拟网卡接入这个网桥（图中的docker0），那么它们之间也就可以正常的收发网络数据包了。不过和host模式相比，bridge模式多了虚拟网桥和网卡，通信效率会低一些。")]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422164940.png",alt:"20230422164940"}})]),e._v(" "),a("p",[e._v("和host模式一样，我们也可以用 "),a("code",[e._v("--net=bridge")]),e._v(" 来启用桥接模式，但其实并没有这个必要，因为Docker默认的网络模式就是bridge，所以一般不需要显式指定。")]),e._v(" "),a("p",[e._v("下面我们启动两个容器Nginx和Redis，就像刚才说的，没有特殊指定就会使用bridge模式：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -d --rm nginx:alpine    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 默认使用桥接模式")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -d --rm redis           "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 默认使用桥接模式")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("然后我们还是在本机和容器里执行 "),a("code",[e._v("ip addr")]),e._v(" 命令（Redis容器里没有ip命令，所以只能在Nginx容器里执行）：")]),e._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422165049.png",alt:"20230422165049"}})]),e._v(" "),a("p",[e._v("对比一下刚才host模式的输出，就可以发现容器里的网卡设置与宿主机完全不同，eth0是一个虚拟网卡，IP地址是B类私有地址“172.17.0.2”。")]),e._v(" "),a("p",[e._v("我们还可以用 "),a("code",[e._v("docker inspect")]),e._v(" 直接查看容器的 ip 地址：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" inspect xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" IPAddress\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230422165210.png",alt:"20230422165210"}})]),e._v(" "),a("p",[e._v("这显示出两个容器的IP地址分别是“172.17.0.2”和“172.17.0.3”，而宿主机的IP地址则是“172.17.0.1”，所以它们都在“172.17.0.0/16”这个Docker的默认网段，彼此之间就能够使用IP地址来实现网络通信了。")]),e._v(" "),a("h3",{attrs:{id:"_5-4-如何分配服务端口号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-如何分配服务端口号"}},[e._v("#")]),e._v(" 5.4 如何分配服务端口号")]),e._v(" "),a("p",[e._v("在编写 Dockerfile 时，可以用 EXPOSE 指令声明容器对外的端口号，在 docker run 时也可以使用 "),a("code",[e._v("-p")]),e._v(" 参数来实现端口映射。")]),e._v(" "),a("h3",{attrs:{id:"_5-5-课外小贴士"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-课外小贴士"}},[e._v("#")]),e._v(" 5.5 课外小贴士")]),e._v(" "),a("ul",[a("li",[e._v("Docker 还可以使用“volume”命令创建独立挂载的数据卷”，但它的用法与 Kubernetes 差距较大，为了避免混淆这里就不介绍了。")]),e._v(" "),a("li",[e._v("Docker 官方推荐使用来代替“-v”，但--mount--mount”用法很繁琐，而“-v”已经有了很长的应用历史了，所以我还是建议用较为方便的“-v”。")]),e._v(" "),a("li",[a("code",[e._v("-v")]),e._v(" 挂载目录时如果发现源路径不存在会自动创建这有时候会是一个“坑”，当主机目录被意外删除时会导致容器里出现空目录，让应用无法按预想的流程工作。")]),e._v(" "),a("li",[a("code",[e._v("-v")]),e._v(" 挂载目录默认是可读可写的，但也可以加上 "),a("code",[e._v(":ro")]),e._v(" 变成只读，可以防止容器意外修改文件，例如 "),a("code",[e._v("-v /tmp:/tmp:ro")])]),e._v(" "),a("li",[e._v("IPv4 地址是 32 位，分为 5 类 (ABCDE)，ABC 类地址中各有一部分网段可以私用，“172.16.0.0/16~172.31.0.0/16”就都属于 B 类私有地址。")])])],1)}),[],!1,null,null,null);s.default=r.exports}}]);