(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{1072:function(t,s,a){"use strict";a.r(s);var _=a(22),r=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_4-1-y86-64-指令集体系结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-y86-64-指令集体系结构"}},[t._v("#")]),t._v(" 4.1 Y86-64 指令集体系结构")]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#_4-1-1-程序员的可见状态"}},[t._v("4.1.1 程序员的可见状态")])]),_("li",[_("a",{attrs:{href:"#_4-1-2-y86-64-指令"}},[t._v("4.1.2 Y86-64 指令")])]),_("li",[_("a",{attrs:{href:"#_4-1-3-指令编码"}},[t._v("4.1.3 指令编码")]),_("ul",[_("li",[_("a",{attrs:{href:"#对程序寄存器编码"}},[t._v("对程序寄存器编码")])]),_("li",[_("a",{attrs:{href:"#数字的表示"}},[t._v("数字的表示")])]),_("li",[_("a",{attrs:{href:"#指令示例"}},[t._v("指令示例")])])])]),_("li",[_("a",{attrs:{href:"#_4-1-4-程序状态码-stat"}},[t._v("4.1.4 程序状态码 Stat")])]),_("li",[_("a",{attrs:{href:"#_4-1-5-y86-64-程序示例"}},[t._v("4.1.5 Y86-64 程序示例")])]),_("li",[_("a",{attrs:{href:"#_4-1-6-一些-y86-64-指令的详情-badge-text-不重要"}},[t._v("4.1.6 一些 Y86-64 指令的详情 "),_("Badge",{attrs:{text:"不重要"}})],1)]),_("li",[_("a",{attrs:{href:"#_4-1-7-risc-和-cisc-指令集"}},[t._v("4.1.7 RISC 和 CISC 指令集")])])])]),_("p"),t._v(" "),_("p",[_("strong",[t._v("ISA")]),t._v("：一个处理器支持的指令和指令的字节级编码被称为它的"),_("strong",[t._v("指令集体系结构")]),t._v("（Instruction-Set Architecture, ISA）。")]),t._v(" "),_("p",[t._v("ISA 在编译器编写者和处理器设计人员之间提供了一个概念抽象层")]),t._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[t._v("ISA 提供的抽象")]),t._v(" "),_("ul",[_("li",[t._v("编译器编写者只需要知道允许哪些指令，以及它们是如何编码的；")]),t._v(" "),_("li",[t._v("处理器设计者必须建造出执行这些指令的处理器。")])])]),t._v(" "),_("p",[t._v("本章首先定义了一个简单的指令集作为我们处理器实现的运行示例，称之为“Y86-64”指令集。作为设计处理器的第一步，我们给出了一个基于顺序操作、功能正确但是有点不实用的 Y86-64 处理器。")]),t._v(" "),_("h2",{attrs:{id:"_4-1-1-程序员的可见状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-程序员的可见状态"}},[t._v("#")]),t._v(" 4.1.1 程序员的可见状态")]),t._v(" "),_("Badge",{attrs:{text:"重要"}}),t._v(" "),_("p",[t._v("Y86-64 程序中的每条指令都会读取或修改处理器状态的某些部分，这称为"),_("strong",[t._v("程序员可见状态")]),t._v("，其包含：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(587),alt:""}})]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("程序寄存器")]),t._v("，15 个，%rsp 作为栈指针寄存器，除此之外寄存器没有固定的含义或固定值")]),t._v(" "),_("li",[_("strong",[t._v("条件码")]),t._v("，3 个，保存着最近的算术或逻辑指令所造成的影响")]),t._v(" "),_("li",[_("strong",[t._v("程序计数器")]),t._v("（PC），存放当前正在执行指令的地址")]),t._v(" "),_("li",[_("strong",[t._v("程序状态码 Stat")]),t._v("，表明程序执行的总体状态，它会指示是正常运行还是出现了某种异常")]),t._v(" "),_("li",[_("strong",[t._v("内存")]),t._v("，从概念上说就是一个很大的字节数组，保存着程序和数据")])]),t._v(" "),_("h2",{attrs:{id:"_4-1-2-y86-64-指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-y86-64-指令"}},[t._v("#")]),t._v(" 4.1.2 Y86-64 指令")]),t._v(" "),_("blockquote",[_("p",[t._v("它只包含 8 字节整数操作，所以称之为“字”也不会有歧义。")])]),t._v(" "),_("p",[t._v("Y86-64 ISA 的简单描述：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(588),alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("两个内存传送指令中的内存引用方式是简单的基址和偏移量形式，即 "),_("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[_("mjx-math",{staticClass:" MJX-TEX"},[_("mjx-mi",{staticClass:"mjx-i"},[_("mjx-c",{attrs:{c:"I"}})],1),_("mjx-mi",{staticClass:"mjx-i"},[_("mjx-c",{attrs:{c:"m"}})],1),_("mjx-mi",{staticClass:"mjx-i"},[_("mjx-c",{attrs:{c:"m"}})],1),_("mjx-mo",{staticClass:"mjx-n"},[_("mjx-c",{attrs:{c:"("}})],1),_("mjx-msub",[_("mjx-mi",{staticClass:"mjx-i",attrs:{noIC:"true"}},[_("mjx-c",{attrs:{c:"r"}})],1),_("mjx-script",{staticStyle:{"vertical-align":"-0.15em"}},[_("mjx-mi",{staticClass:"mjx-i",attrs:{size:"s"}},[_("mjx-c",{attrs:{c:"b"}})],1)],1)],1),_("mjx-mo",{staticClass:"mjx-n"},[_("mjx-c",{attrs:{c:")"}})],1)],1)],1),t._v(" 的形式。")],1),t._v(" "),_("li",[t._v("halt 指令停止指令的执行。这对于 Y86-64 来说，执行 halt 指令会导致处理器停止，并将状态码设置为 HLT。")])]),t._v(" "),_("h2",{attrs:{id:"_4-1-3-指令编码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-指令编码"}},[t._v("#")]),t._v(" 4.1.3 指令编码")]),t._v(" "),_("p",[t._v("每个指令需要 1~10 个字节不等，每条指令的第一个字节表明指令的类型（从而可以判断指令的长度），该字节分为高四位的"),_("strong",[t._v("代码部分")]),t._v("和低四位的"),_("strong",[t._v("功能部分")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(589),alt:""}})]),t._v(" "),_("p",[_("strong",[t._v("字节编码必须有唯一的解释")]),t._v("。即使代码嵌入在程序的其他字节中，只要从需要序列的第一个字节开始处理，我们仍然可以无二义地确定指令序列。")]),t._v(" "),_("h3",{attrs:{id:"对程序寄存器编码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对程序寄存器编码"}},[t._v("#")]),t._v(" 对程序寄存器编码")]),t._v(" "),_("p",[t._v("15 个程序寄存器中每个都有一个相对应的范围在 0 到 0xE 之间的"),_("strong",[t._v("寄存器标识符")]),t._v("（register ID），程序寄存器存在 CPU 中的一个寄存器文件中。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(590),alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("当需要指明不应访问任何寄存器时，就用 ID 值 0xF 来表示。比如那些只需要一个寄存器操作数的指令（irmovq、pushq、pop）就将另一个寄存器指示符设为 0xF。")])]),t._v(" "),_("h3",{attrs:{id:"数字的表示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数字的表示"}},[t._v("#")]),t._v(" 数字的表示")]),t._v(" "),_("p",[t._v("注意分支指令和调用指令的目的是一个绝对地址，而不像 IA32 中使用相对寻址方式。")]),t._v(" "),_("p",[t._v("所有整数采用"),_("strong",[t._v("小端序编码")]),t._v("。当指令按照反汇编格式书写时，这些字节就以相反的顺序出现。")]),t._v(" "),_("h3",{attrs:{id:"指令示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#指令示例"}},[t._v("#")]),t._v(" 指令示例")]),t._v(" "),_("h4",{attrs:{id:"_1-加法指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-加法指令"}},[t._v("#")]),t._v(" （1）"),_("strong",[t._v("加法指令")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(591),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_2-算术和逻辑操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-算术和逻辑操作"}},[t._v("#")]),t._v(" （2）"),_("strong",[t._v("算术和逻辑操作")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(592),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_3-传送操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-传送操作"}},[t._v("#")]),t._v(" （3）"),_("strong",[t._v("传送操作")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(593),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_4-条件传送指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-条件传送指令"}},[t._v("#")]),t._v(" （4）"),_("strong",[t._v("条件传送指令")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(594),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_5-跳转指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-跳转指令"}},[t._v("#")]),t._v(" （5）"),_("strong",[t._v("跳转指令")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(595),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_6-栈操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-栈操作"}},[t._v("#")]),t._v(" （6）"),_("strong",[t._v("栈操作")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(596),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_7-子程序调用和返回"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-子程序调用和返回"}},[t._v("#")]),t._v(" （7）"),_("strong",[t._v("子程序调用和返回")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(597),alt:""}})]),t._v(" "),_("h4",{attrs:{id:"_8-其他指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-其他指令"}},[t._v("#")]),t._v(" （8）"),_("strong",[t._v("其他指令")]),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(598),alt:""}})]),t._v(" "),_("h2",{attrs:{id:"_4-1-4-程序状态码-stat"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-4-程序状态码-stat"}},[t._v("#")]),t._v(" 4.1.4 程序状态码 Stat")]),t._v(" "),_("p",[t._v("它描述了程序执行的总体状态。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(599),alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("对于 Y86-64，当遇到这些异常时我们让处理器停止执行指令。在更完整的设计中，处理器会调用一个"),_("strong",[t._v("异常处理程序")]),t._v("来处理遇到的异常。")])]),t._v(" "),_("h2",{attrs:{id:"_4-1-5-y86-64-程序示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-5-y86-64-程序示例"}},[t._v("#")]),t._v(" 4.1.5 Y86-64 程序示例")]),t._v(" "),_("p",[_("img",{attrs:{src:a(600),alt:""}})]),t._v(" "),_("p",[t._v("下图我们给出了用 Y86-64 汇编代码编写的一个完整的程序文件例子，这个程序说明了栈的位置、数据初始化、程序初始化和程序结束等问题：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(601),alt:""}})]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("伪指令")]),t._v("指明了应该将代码或数据放在什么位置，以及如何对齐。\n"),_("ul",[_("li",[t._v("在这个程序中，以"),_("code",[t._v(".")]),t._v("开头的词是汇编伪指令，它们告诉汇编器调整地址，以便在那儿产生代码或者插入一些数据。")])])]),t._v(" "),_("li",[t._v("我们必须保证栈不会增长得太大以至于覆盖了代码或者其他程序数据。")])]),t._v(" "),_("p",[t._v("我们实现了一个"),_("strong",[t._v("指令集模拟器")]),t._v("，称为 YIS。它的目的是模拟 Y86-64 机器代码程序的执行，而不是试图去模拟任何具体处理器实现的行为。")]),t._v(" "),_("h2",{attrs:{id:"_4-1-6-一些-y86-64-指令的详情"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-6-一些-y86-64-指令的详情"}},[t._v("#")]),t._v(" 4.1.6 一些 Y86-64 指令的详情 "),_("Badge",{attrs:{text:"不重要"}})],1),t._v(" "),_("p",[t._v("有两个指令的处理器行为是不确定的，我们采用和 x86-64 一样的做法：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("pushq %rsp")]),t._v("：压入的是 %rsp 的旧值；")]),t._v(" "),_("li",[_("code",[t._v("popq %rsp")]),t._v("：将 %rsp 设置为从内存中读出来的数。")])]),t._v(" "),_("h2",{attrs:{id:"_4-1-7-risc-和-cisc-指令集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-7-risc-和-cisc-指令集"}},[t._v("#")]),t._v(" 4.1.7 RISC 和 CISC 指令集")]),t._v(" "),_("ul",[_("li",[t._v("CISC：复杂指令集计算机")]),t._v(" "),_("li",[t._v("RISC：精简指令集计算机")])]),t._v(" "),_("p",[_("img",{attrs:{src:a(602),alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("事实已经很清楚了，无论是单纯的 RISC 还是单纯的 CISC 都不如结合两者思想精华的设计。")]),t._v(" "),_("li",[t._v("今天的 RISC 指令表中有几百条指令了，几乎与“精简”不相匹配了。那种将实现细节暴露给机器级程序的思想已经被证明是目光短浅的。")]),t._v(" "),_("li",[t._v("比较新的 CISC 机器也利用了高性能流水线结构。他们读取指令并动态翻译成简单的指令序列。")])])],1)}),[],!1,null,null,null);s.default=r.exports},587:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-12-37-50.d757f826.png"},588:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-12-42-33.38385823.png"},589:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-12-47-47.47b11b10.png"},590:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-12-51-26.93531bc0.png"},591:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-06-43.975b990a.png"},592:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-07-37.0693dc56.png"},593:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-08-24.1b6db246.png"},594:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-08-36.be8220a4.png"},595:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-08-54.778a7faa.png"},596:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-10-12.04e1e998.png"},597:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-10-48.e2f3651c.png"},598:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-11-14.62210e13.png"},599:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-13-37.177a2baf.png"},600:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-17-08.785e7b16.png"},601:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-18-11.ab200f80.png"},602:function(t,s,a){t.exports=a.p+"assets/img/2021-07-24-13-52-58.5f784284.png"}}]);