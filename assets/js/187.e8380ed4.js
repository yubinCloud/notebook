(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{938:function(t,a,_){"use strict";_.r(a);var e=_(22),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-如何判断对象可以回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何判断对象可以回收"}},[t._v("#")]),t._v(" 1. 如何判断对象可以回收")]),t._v(" "),_("h3",{attrs:{id:"_1-1-引用计数法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引用计数法"}},[t._v("#")]),t._v(" 1.1 引用计数法")]),t._v(" "),_("p",[t._v("每多一个变量引用一个对象，这个引用计数就 +1，反之则 -1。当计数为 0 时，该对象就可以回收了。")]),t._v(" "),_("blockquote",[_("p",[t._v("类似于 C++ 的 shared_ptr。")])]),t._v(" "),_("p",[t._v("但这种方法无法解决循环引用的问题。")]),t._v(" "),_("h3",{attrs:{id:"_1-2-可达性分析算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-可达性分析算法"}},[t._v("#")]),t._v(" 1.2 可达性分析算法")]),t._v(" "),_("p",[t._v("Java 虚拟机中的垃圾回收器采用可达性分析来探索所有存活的对象。")]),t._v(" "),_("p",[t._v("它扫描 heap 中的对象，看是否能够以 GC Root 对象为起点，沿着引用链找到该对象，如果找不到，表示可以回收。")]),t._v(" "),_("blockquote",[_("p",[t._v("这就可以类比“提葡萄”，我们从根上提起一串葡萄，能够提起来的就是可达的对象，提不起来的就是可以回收的。")])]),t._v(" "),_("p",[t._v("那么哪些对象可以作为 GC Root 呢？这可以通过工具 Eclipse Memory Analyzer 看到。")]),t._v(" "),_("blockquote",[_("p",[t._v("原视频这里看的有点晕。")])]),t._v(" "),_("h3",{attrs:{id:"_1-3-四种引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-四种引用"}},[t._v("#")]),t._v(" 1.3 ⭐️ 四种引用")]),t._v(" "),_("p",[t._v("// 这里需要看书")])])}),[],!1,null,null,null);a.default=r.exports}}]);