(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{1025:function(s,t,a){"use strict";a.r(t);var e=a(22),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("参考："),a("a",{attrs:{href:"https://time.geekbang.org/column/article/71492",target:"_blank",rel:"noopener noreferrer"}},[s._v("11 怎么给字符串字段加索引？| 极客时间"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"_1-怎么给字符串字段加索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎么给字符串字段加索引"}},[s._v("#")]),s._v(" 1. 怎么给字符串字段加索引？")]),s._v(" "),a("p",[s._v("现在，几乎所有的系统都支持邮箱登录，如何在邮箱这样的字段上建立合理的索引，是我们今天要讨论的问题。")]),s._v(" "),a("h3",{attrs:{id:"_1-1-前缀索引的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-前缀索引的使用"}},[s._v("#")]),s._v(" 1.1 前缀索引的使用")]),s._v(" "),a("p",[s._v("假设，你现在维护一个支持邮箱登录的系统，用户表是这么定义的：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" SUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    ID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bigint")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("primary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("engine")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("innodb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("由于要使用邮箱登录，所以业务代码中一定会出现类似于这样的语句：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们可以知道，如果 email 这个字段上没有索引，那么这个语句就只能做全表扫描。")]),s._v(" "),a("p",[s._v("同时，MySQL 是支持"),a("mark",[s._v("前缀索引")]),s._v("的，也就是说，你可以定义字符串的一部分作为索引。默认地，如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字符串。")]),s._v(" "),a("p",[s._v("比如，这两个在 email 字段上创建索引的语句：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" SUser "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n或\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" SUser "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("第一个语句创建的 index1 索引里面，包含了每个记录的整个字符串；")]),s._v(" "),a("li",[s._v("第二个语句创建的 index2 索引里面，对于每个记录都是只取前 6 个字节。")])]),s._v(" "),a("p",[s._v("那么，这两种不同的定义在数据结构和存储上有什么区别呢？如下图 1 和 2 就是这两个索引的示意图：")]),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230523220455.png",alt:"20230523220455"}})]),s._v(" "),a("center",[a("font",{attrs:{color:"gray"}},[s._v("图 1 email 索引结构")])],1),s._v(" "),a("center",[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20230523220523.png",alt:"20230523220523"}})]),s._v(" "),a("center",[a("font",{attrs:{color:"gray"}},[s._v("图 2 email(6) 索引结构")])],1),s._v(" "),a("p",[s._v("从图中你可以看到，由于 email(6) 这个索引结构中每个邮箱字段都只取前 6 个字节（即：zhangs），所以"),a("strong",[s._v("索引占用的空间会更小，这就是使用前缀索引的优势")]),s._v("。但，这同时带来的损失是，可能会增加额外的记录扫描次数。")]),s._v(" "),a("p",[s._v("接下来，我们再看看下面这个语句，在这两个索引定义下分别是怎么执行下面这条 SQL 的：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhangssxyz@xxx.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[a("strong",[s._v("如果使用的是 index1")]),s._v("（即 email 整个字符串的索引结构），执行顺序是这样的：\n"),a("ol",[a("li",[s._v("从 index1 索引树找到满足索引值是 "),a("code",[s._v("zhangssxyz@xxx.com")]),s._v(" 的这条记录，取得 ID2 的值；")]),s._v(" "),a("li",[s._v("到主键上查到主键值是 ID2 的行，判断 email 的值是正确的，将这行记录加入结果集；")]),s._v(" "),a("li",[s._v("取 index1 索引树上刚刚查到的位置的下一条记录，发现已经不满足 "),a("code",[s._v("email='zhangssxyz@xxx.com'")]),s._v(" 的条件了，循环结束。")])])])]),s._v(" "),a("p",[s._v("这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("如果使用的是 index2")]),s._v("（即 email(6) 索引结构），执行顺序是这样的：\n"),a("ol",[a("li",[s._v("从 index2 索引树找到满足索引值是’zhangs’的记录，找到的第一个是 ID1；")]),s._v(" "),a("li",[s._v("到主键上查到主键值是 ID1 的行，判断出 email 的值不是 "),a("code",[s._v("zhangssxyz@xxx.com")]),s._v("，这行记录丢弃；")]),s._v(" "),a("li",[s._v("取 index2 上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出 ID2，再到 ID 索引上取整行然后判断，这次值对了，将这行记录加入结果集；")]),s._v(" "),a("li",[s._v("重复上一步，直到在 idxe2 上取到的值不是’zhangs’时，循环结束。")])])])]),s._v(" "),a("p",[s._v("在这个过程中，要回主键索引取 4 次数据，也就是扫描了 4 行。通过这个对比，你很容易就可以发现，"),a("strong",[s._v("使用前缀索引后，可能会导致查询语句读数据的次数变多")]),s._v("。")]),s._v(" "),a("p",[s._v("但是，对于这个查询语句来说，如果你定义的 index2 不是 email(6) 而是 email(7)，也就是说取 email 字段的前 7 个字节来构建索引的话，即满足前缀’zhangss’的记录只有一个，也能够直接查到 ID2，只扫描一行就结束了。")]),s._v(" "),a("p",[s._v("也就是说"),a("font",{attrs:{color:"blue"}},[s._v("使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本")]),s._v("。")],1),s._v(" "),a("p",[s._v("于是，你就有个问题：当要给字符串创建前缀索引时，有什么方法能够确定我应该使用多长的前缀呢？")]),s._v(" "),a("p",[s._v("实际上，我们在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。因此，我们可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。")]),s._v(" "),a("p",[s._v("首先，你可以使用下面这个语句，算出这个列上有多少个不同的值：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后，依次选取不同长度的前缀来看这个值，比如我们要看一下 4~7 个字节的前缀索引，可以用这个语句：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("）"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" L7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("当然，使用前缀索引很可能会损失区分度，所以你需要预先设定一个可以接受的损失比例，比如 5%。然后，在返回的 L4~L7 中，找出不小于 L * 95% 的值，假设这里 L6、L7 都满足，你就可以选择前缀长度为 6。")]),s._v(" "),a("h3",{attrs:{id:"_1-2-前缀索引对覆盖索引的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-前缀索引对覆盖索引的影响"}},[s._v("#")]),s._v(" 1.2 前缀索引对覆盖索引的影响")]),s._v(" "),a("p",[s._v("前面我们说了使用前缀索引可能会增加扫描行数，这会影响到性能。其实，前缀索引的影响不止如此，我们再看一下另外一个场景。")]),s._v(" "),a("p",[s._v("你先来看看这个 SQL 语句：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhangssxyz@xxx.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("与前面例子中的 SQL 语句")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" SUser "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zhangssxyz@xxx.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("相比，这个语句只要求返回 id 和 email 字段。")]),s._v(" "),a("p",[s._v("所以，如果使用 index1（即 email 整个字符串的索引结构）的话，可以利用覆盖索引，从 index1 查到结果后直接就返回了，不需要回到 ID 索引再去查一次。而如果使用 index2（即 email(6) 索引结构）的话，就不得不回到 ID 索引再去判断 email 字段的值。")]),s._v(" "),a("blockquote",[a("p",[s._v("即使你将 index2 的定义修改为 email(18) 的前缀索引，这时候虽然 index2 已经包含了所有的信息，但 InnoDB 还是要回到 id 索引再查一下，因为系统并不确定前缀索引的定义是否截断了完整信息。")])]),s._v(" "),a("p",[s._v("也就是说，"),a("strong",[s._v("使用前缀索引就用不上覆盖索引对查询性能的优化了")]),s._v("，这也是你在选择是否使用前缀索引时需要考虑的一个因素。")]),s._v(" "),a("h3",{attrs:{id:"_1-3-其他方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-其他方式"}},[s._v("#")]),s._v(" 1.3 其他方式")]),s._v(" "),a("p",[s._v("对于类似于邮箱这样的字段来说，使用前缀索引的效果可能还不错。但是，遇到前缀的区分度不够好的情况时，我们要怎么办呢？")]),s._v(" "),a("p",[s._v("比如，我们国家的身份证号，一共 18 位，其中前 6 位是地址码，所以同一个县的人的身份证号前 6 位一般会是相同的。")]),s._v(" "),a("p",[s._v("假设你维护的数据库是一个市的公民信息系统，这时候如果对身份证号做长度为 6 的前缀索引的话，这个索引的区分度就非常低了。按照我们前面说的方法，可能你需要创建长度为 12 以上的前缀索引，才能够满足区分度要求。但是，索引选取的越长，占用的磁盘空间就越大，相同的数据页能放下的索引值就越少，搜索的效率也就会越低。")]),s._v(" "),a("p",[s._v("那么，如果我们能够确定业务需求里面只有按照身份证进行等值查询的需求，还有没有别的处理方法呢？这种方法，既可以占用更小的空间，也能达到相同的查询效率。答案是，有的。")]),s._v(" "),a("p",[a("strong",[s._v("第一种方式是使用倒序存储")]),s._v("。如果你存储身份证号的时候把它倒过来存，每次查询的时候，你可以这么写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" field_list "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id_card "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input_id_card_string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于身份证号的最后 6 位没有地址码这样的重复逻辑，所以最后这 6 位很可能就提供了足够的区分度。当然了，实践中你不要忘记使用 "),a("code",[s._v("count(distinct)")]),s._v(" 方法去做个验证。")]),s._v(" "),a("p",[a("strong",[s._v("第二种方式是使用 hash 字段")]),s._v("。你可以在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" id_card_crc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id_card_crc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段。由于校验码可能存在冲突，也就是说两个不同的身份证号通过 crc32() 函数得到的结果可能是相同的，所以你的查询语句 where 部分要判断 id_card 的值是否精确相同。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" field_list "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id_card_crc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("crc32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input_id_card_string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" id_card"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input_id_card_string'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样，索引的长度变成了 4 个字节，比原来小了很多。")]),s._v(" "),a("p",[s._v("接下来，我们再一起看看"),a("strong",[s._v("使用倒序存储和使用 hash 字段这两种方法的异同点")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("相同点是，"),a("u",[s._v("都不支持范围查询")]),s._v("。倒序存储的字段上创建的索引是按照倒序字符串的方式排序的，已经没有办法利用索引方式查出身份证号码在[ID_X, ID_Y]的所有市民了。同样地，hash 字段的方式也只能支持等值查询。")]),s._v(" "),a("li",[s._v("区别主要体现在以下三个方面：\n"),a("ul",[a("li",[s._v("从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而 hash 字段方法需要增加一个字段。当然，倒序存储方式使用 4 个字节的前缀长度应该是不够的，如果再长一点，这个消耗跟额外这个 hash 字段也差不多抵消了。")]),s._v(" "),a("li",[s._v("在 CPU 消耗方面，倒序方式每次写和读的时候，都需要额外调用一次 reverse 函数，而 hash 字段的方式需要额外调用一次 crc32() 函数。如果只从这两个函数的计算复杂度来看的话，reverse 函数额外消耗的 CPU 资源会更小些。")]),s._v(" "),a("li",[s._v("从查询效率上看，使用 hash 字段方式的查询性能相对更稳定一些。因为 crc32 算出来的值虽然有冲突的概率，但是概率非常小，可以认为每次查询的平均扫描行数接近 1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。")])])])]),s._v(" "),a("h3",{attrs:{id:"_1-4-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-小结"}},[s._v("#")]),s._v(" 1.4 小结")]),s._v(" "),a("p",[s._v("总结一下给字符串的字段创建索引的方式：")]),s._v(" "),a("ul",[a("li",[s._v("直接创建"),a("strong",[s._v("完整索引")]),s._v("，这样可能比较占用空间；")]),s._v(" "),a("li",[s._v("创建"),a("strong",[s._v("前缀索引")]),s._v("，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；")]),s._v(" "),a("li",[a("strong",[s._v("倒序存储")]),s._v("，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；")]),s._v(" "),a("li",[a("strong",[s._v("创建 hash 字段索引")]),s._v("，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。")])]),s._v(" "),a("p",[s._v("在实际应用中，你要根据业务字段的特点选择使用哪种方式。")])],1)}),[],!1,null,null,null);t.default=n.exports}}]);