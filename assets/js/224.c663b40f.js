(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{977:function(s,t,a){"use strict";a.r(t);var e=a(22),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("摘抄自 "),a("a",{attrs:{href:"https://gitee.com/progit/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pro Git"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"_1-git-的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-的特点"}},[s._v("#")]),s._v(" 1. Git 的特点")]),s._v(" "),a("p",[s._v("Git 在保存和处理各种信息的时候，虽然操作起来的命令形式非常相近，但它与其他版本控制系统的做法颇为不同，因此不要尝试把各种概念和其他版本控制系统相比拟，但理解这些差异将有助于你准确地使用 Git 提供的各种工具。")]),s._v(" "),a("h4",{attrs:{id:"_1-直接记录快照-而非差异比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-直接记录快照-而非差异比较"}},[s._v("#")]),s._v(" 1）直接记录快照，而非差异比较")]),s._v(" "),a("p",[s._v("Git 和其他版本控制系统的主要差别在于，Git 只关心"),a("strong",[s._v("文件的整体")]),s._v("是否发生变化，而大多数其他系统则只关心文件内容的具体差异。Git 并"),a("strong",[s._v("不保存这些前后变化的差异数据")]),s._v("。实际上，Git 更像是把变化的文件"),a("strong",[s._v("作快照")]),s._v("后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。")]),s._v(" "),a("h4",{attrs:{id:"_2-近乎所有操作都是本地执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-近乎所有操作都是本地执行"}},[s._v("#")]),s._v(" 2）近乎所有操作都是本地执行")]),s._v(" "),a("p",[s._v("Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。")]),s._v(" "),a("h4",{attrs:{id:"_3-时刻保持数据完整性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-时刻保持数据完整性"}},[s._v("#")]),s._v(" 3）时刻保持数据完整性")]),s._v(" "),a("p",[s._v("在保存到 Git 之前，所有数据都要进行"),a("strong",[s._v("内容的校验和")]),s._v("（checksum）计算，并将此结果"),a("strong",[s._v("作为数据的唯一标识和索引")]),s._v("。这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git 都能立即察觉。")]),s._v(" "),a("p",[s._v("Git 使用 "),a("strong",[s._v("SHA-1 算法")]),s._v("计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符（0-9 及 a-f）组成，看起来就像是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("24b9da6552252987aa493b52f8696cd6d3b00373\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。")]),s._v(" "),a("h4",{attrs:{id:"_4-多数操作仅添加数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-多数操作仅添加数据"}},[s._v("#")]),s._v(" 4）多数操作仅添加数据")]),s._v(" "),a("p",[s._v("在 Git 里，一旦提交快照之后就完全不用担心丢失数据，这种"),a("strong",[s._v("高可靠性")]),s._v("令我们的开发工作安心不少，尽管去做各种试验性的尝试好了，"),a("strong",[s._v("再怎样也不会弄丢数据")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"_5-文件的三种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-文件的三种状态"}},[s._v("#")]),s._v(" 5）文件的三种状态")]),s._v(" "),a("p",[a("u",[s._v("对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）")]),s._v("。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("已提交")]),s._v("表示该文件已经被安全地保存在本地数据库中了；")]),s._v(" "),a("li",[a("strong",[s._v("已修改")]),s._v("表示修改了某个文件，但还没有提交保存；")]),s._v(" "),a("li",[a("strong",[s._v("已暂存")]),s._v("表示把已修改的文件放在下次提交时要保存的清单中。")])]),s._v(" "),a("p",[s._v("由此我们看到 Git 管理项目时，"),a("u",[s._v("文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库")]),s._v("：")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220124232643499.png",alt:"image-20220124232643499"}}),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Git 目录")]),s._v("（"),a("code",[s._v(".git")]),s._v("）是保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。")]),s._v(" "),a("li",[s._v("从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做"),a("strong",[s._v("工作目录")]),s._v("；")]),s._v(" "),a("li",[s._v("所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫"),a("strong",[s._v("暂存区域")]),s._v("；")])]),s._v(" "),a("p",[s._v("我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。")]),s._v(" "),a("h2",{attrs:{id:"_2-git-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-的配置"}},[s._v("#")]),s._v(" 2. Git 的配置")]),s._v(" "),a("p",[a("strong",[s._v("git config")]),s._v(" 专门用来配置或读取相应的"),a("strong",[s._v("工作环境变量")]),s._v("。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("/etc/gitconfig")]),s._v(" 文件：系统中"),a("strong",[s._v("对所有用户")]),s._v("都普遍适用的配置。若使用 "),a("code",[s._v("git config")]),s._v(" 时用 "),a("code",[s._v("--system")]),s._v(" 选项，读写的就是这个文件。")]),s._v(" "),a("li",[a("code",[s._v("~/.gitconfig")]),s._v(" 文件：用户目录下的配置文件只适用于"),a("strong",[s._v("该用户")]),s._v("。若使用 "),a("code",[s._v("git config")]),s._v(" 时用 "),a("code",[s._v("--global")]),s._v(" 选项，读写的就是这个文件。")]),s._v(" "),a("li",[s._v("当前项目的 git 目录中的配置文件（也就是工作目录中的 "),a("code",[s._v(".git/config")]),s._v(" 文件）：这里的配置仅仅针"),a("strong",[s._v("对当前项目")]),s._v("有效。每一个级别的配置都会覆盖上层的相同配置，所以 "),a("code",[s._v(".git/config")]),s._v(" 里的配置会覆盖 "),a("code",[s._v("/etc/gitconfig")]),s._v(" 中的同名变量。")])]),s._v(" "),a("p",[s._v("在 Windows 系统上，Git 会找寻用户主目录下的 "),a("code",[s._v(".gitconfig")]),s._v(" 文件。主目录即 "),a("code",[s._v("$HOME")]),s._v(" 变量指定的目录，一般都是 "),a("code",[s._v("C:\\Documents and Settings\\$USER")]),s._v("。此外，Git 还会尝试找寻 "),a("code",[s._v("/etc/gitconfig")]),s._v(" 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-用户信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-用户信息"}},[s._v("#")]),s._v(" 2.1 用户信息")]),s._v(" "),a("p",[s._v("配置 user.name 和 user.email，每次 Git 提交时都会引用这两条信息，"),a("strong",[s._v("说明是谁提交了更新")]),s._v("，所以会随更新内容一起被永久纳入历史记录：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Doe"')]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email johndoe@example.com\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("如果用了 "),a("code",[s._v("--global")]),s._v(" 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。")])]),s._v(" "),a("h3",{attrs:{id:"_2-2-查看配置信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-查看配置信息"}},[s._v("#")]),s._v(" 2.2 查看配置信息")]),s._v(" "),a("p",[a("code",[s._v("git config --list")]),s._v(" 命令检查已有的配置信息：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --list\n    user.name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Scott Chacon\n    user.email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("schacon@gmail.com\n    color.status"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("auto\n    color.branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("auto\n    color.interactive"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("auto\n    color.diff"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("auto\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ul",[a("li",[s._v("有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 "),a("code",[s._v("/etc/gitconfig")]),s._v(" 和 "),a("code",[s._v("~/.gitconfig")]),s._v("），不过最终 Git 实际采用的是最后一个。")])]),s._v(" "),a("p",[s._v("也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.name\n    Scott Chacon\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"_3-获取-git-仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-获取-git-仓库"}},[s._v("#")]),s._v(" 3. 获取 Git 仓库")]),s._v(" "),a("ul",[a("li",[s._v("在现有目录中初始化："),a("code",[s._v("git init")])]),s._v(" "),a("li",[s._v("克隆远程仓库："),a("code",[s._v("git clone [url] <name>")]),s._v(" ，"),a("code",[s._v("<name>")]),s._v(" 可选，用于重命名。")])]),s._v(" "),a("p",[s._v("git 支持多种数据传输协议："),a("code",[s._v("https://")]),s._v("、"),a("code",[s._v("git://")]),s._v(" 或 SSH 协议。")]),s._v(" "),a("h2",{attrs:{id:"_4-记录每次更新到仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-记录每次更新到仓库"}},[s._v("#")]),s._v(" 4. 记录每次更新到仓库")]),s._v(" "),a("p",[a("u",[s._v("你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪")]),s._v("。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("已跟踪的文件")]),s._v("是指那些被纳入了版本控制的文件。")]),s._v(" "),a("li",[s._v("工作目录中除已跟踪文件以外的所有其它文件都属于"),a("strong",[s._v("未跟踪文件")]),s._v("，它们既不存在于上次快照的记录中，也没有放入暂存区。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20220125165812340.png",alt:"image-20220125165812340"}})]),s._v(" "),a("h3",{attrs:{id:"_4-1-检查文件的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-检查文件的状态"}},[s._v("#")]),s._v(" 4.1 检查文件的状态")]),s._v(" "),a("p",[a("code",[s._v("git status")]),s._v(" 查看哪些文件处于什么状态。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("示例")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status\nOn branch master\nnothing to commit, working directory clean\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这说明你现在的工作目录相当干净。换句话说，")]),s._v(" "),a("ul",[a("li",[s._v("所有已跟踪文件在上次提交后都未被更改过；")]),s._v(" "),a("li",[s._v("当前目录下没有出现任何处于未跟踪状态的新文件；")]),s._v(" "),a("li",[s._v("当前分支同远程服务器上对应的分支没有偏离。")])])]),s._v(" "),a("h3",{attrs:{id:"_4-2-跟踪新文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-跟踪新文件"}},[s._v("#")]),s._v(" 4.2 跟踪新文件")]),s._v(" "),a("p",[a("code",[s._v("git add [path]")]),s._v(" 开始跟踪一个文件。如果 path 是目录的路径，该命令将递归地跟踪该目录下的所有文件。")]),s._v(" "),a("h3",{attrs:{id:"_4-3-暂存已修改文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-暂存已修改文件"}},[s._v("#")]),s._v(" 4.3 暂存已修改文件")]),s._v(" "),a("p",[s._v("已跟踪文件的内容发生了变化时，不会立刻被放到暂存区，要暂存这次更新，需要运行 "),a("code",[s._v("git add")]),s._v(" 命令。")]),s._v(" "),a("p",[a("strong",[s._v("git add")]),s._v(" 是个多功能命令："),a("u",[s._v("可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等")]),s._v("。将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。")]),s._v(" "),a("p",[s._v("当在 git add 之后再修改该文件，会同时出现暂存区和非暂存区。实际上 Git 只不过暂存了你运行 "),a("code",[s._v("git add")]),s._v(" 命令时的版本，"),a("strong",[s._v("如果你 commit，提交的版本是你最后一次运行 git add 命令时的版本")]),s._v("。所以，运行了 "),a("code",[s._v("git add")]),s._v(" 之后又作了修订的文件，需要重新运行 "),a("code",[s._v("git add")]),s._v(" 把最新版本重新暂存起来。")]),s._v(" "),a("h3",{attrs:{id:"_4-4-状态简览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-状态简览"}},[s._v("#")]),s._v(" 4.4 状态简览")]),s._v(" "),a("p",[s._v("git status 命令的输出十分详细，但其用语有些繁琐。 如果你使用 "),a("code",[s._v("git status -s")]),s._v(" 命令或 "),a("code",[s._v("git status --short")]),s._v(" 命令，你将得到一种"),a("strong",[s._v("更为紧凑")]),s._v("的格式输出。 运行 "),a("code",[s._v("git status -s")]),s._v(" ，状态报告输出如下：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("新添加的未跟踪文件前面有 "),a("code",[s._v("??")]),s._v(" 标记，新添加到暂存区中的文件前面有 "),a("code",[s._v("A")]),s._v(" 标记，修改过的文件前面有 "),a("code",[s._v("M")]),s._v(" 标记。 你可能注意到了 "),a("code",[s._v("M")]),s._v(" 有两个可以出现的位置，出现在右边的 "),a("code",[s._v("M")]),s._v(" 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 "),a("code",[s._v("M")]),s._v(" 表示该文件被修改了并放入了暂存区。比如 "),a("code",[s._v("Rakefile")]),s._v(" 在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录")]),s._v(" "),a("h3",{attrs:{id:"_4-5-忽略文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-忽略文件"}},[s._v("#")]),s._v(" 4.5 忽略文件")]),s._v(" "),a("p",[a("code",[s._v(".gitignore")]),s._v(" 文件列出要"),a("strong",[s._v("忽略")]),s._v("的文件模式，其"),a("strong",[s._v("格式规范")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("所有空行或者以 "),a("code",[s._v("＃")]),s._v(" 开头的行都会被 Git 忽略。")]),s._v(" "),a("li",[s._v("可以使用标准的 glob 模式匹配。")]),s._v(" "),a("li",[s._v("匹配模式可以以（"),a("code",[s._v("/")]),s._v("）开头防止递归。")]),s._v(" "),a("li",[s._v("匹配模式可以以（"),a("code",[s._v("/")]),s._v("）结尾指定目录。")]),s._v(" "),a("li",[s._v("要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（"),a("code",[s._v("!")]),s._v("）取反。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("glob 模式")]),s._v(" "),a("p",[a("strong",[s._v("glob 模式")]),s._v("是指 shell 所使用的简化了的正则表达式。星号（"),a("code",[s._v("*")]),s._v("）匹配零个或多个任意字符；"),a("code",[s._v("[abc]")]),s._v(" 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（"),a("code",[s._v("?")]),s._v("）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 "),a("code",[s._v("[0-9]")]),s._v(" 表示匹配所有 0 到 9 的数字）。 使用两个星号（"),a("code",[s._v("*")]),s._v(") 表示匹配任意中间目录，比如"),a("code",[s._v("a/**/z")]),s._v(" 可以匹配 "),a("code",[s._v("a/z")]),s._v(", "),a("code",[s._v("a/b/z")]),s._v(" 或 "),a("code",[s._v("a/b/c/z")]),s._v("等。")])]),s._v(" "),a("p",[s._v("比如 "),a("code",[s._v("*~")]),s._v(" 告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 要养成"),a("strong",[s._v("一开始就设置好 .gitignore")]),s._v(" 文件的习惯，以免将来误提交这类无用的文件。")]),s._v(" "),a("blockquote",[a("p",[s._v("GitHub 有一个十分详细的针对数十种项目及语言的 "),a("code",[s._v(".gitignore")]),s._v(" 文件列表，你可以在 https://github.com/github/gitignore 找到它.")])]),s._v(" "),a("h3",{attrs:{id:"_4-6-查看已暂存和未暂存的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-查看已暂存和未暂存的修改"}},[s._v("#")]),s._v(" 4.6 查看已暂存和未暂存的修改")]),s._v(" "),a("p",[a("code",[s._v("git diff")]),s._v(" 告诉你"),a("strong",[s._v("具体修改了什么地方")]),s._v("。git diff 通常用来回答这两个问题：")]),s._v(" "),a("ul",[a("li",[s._v("当前做的哪些更新还没有暂存？")]),s._v(" "),a("li",[s._v("有哪些更新已经暂存起来准备好了下次提交？")])]),s._v(" "),a("p",[a("code",[s._v("git status")]),s._v(" 已经通过在相应栏下列出文件名的方式回答了这个问题，"),a("code",[s._v("git diff")]),s._v(" 将通过文件补丁的格式显示具体哪些行发生了改变。")]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("p",[s._v("假如再次修改 README 文件后暂存，然后编辑 "),a("code",[s._v("CONTRIBUTING.md")]),s._v(" 文件后先不暂存， 运行 "),a("code",[s._v("status")]),s._v(" 命令将会看到：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status\nOn branch master\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git reset HEAD <file>..."')]),s._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    modified:   README\n\nChanges not staged "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" commit:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to update what will be committed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git checkout -- <file>..."')]),s._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    modified:   CONTRIBUTING.md\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("font",{attrs:{color:"blue"}},[s._v("要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 "),a("code",[s._v("git diff")]),a("strong",[s._v("，"),a("strong",[s._v("此命令比较的是工作目录中当前文件")]),s._v("和暂存区域快照")]),s._v("之间的差异")]),s._v("， 也就是修改之后还没有暂存起来的变化内容：")],1),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 8ebb991"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("643e24f "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100644")]),s._v("\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -65,7 +65,8 @@ branch directly, things can get messy.\n Please include a "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nice")]),s._v(" description of your changes when you submit your PR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" we have to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" the whole "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" to figure out why you"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'re contributing\n in the first place, you'")]),s._v("re "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("less")]),s._v(" likely to get feedback and have your change\n-merged in.\n+merged in. Also, "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),s._v(" your changes into comprehensive chunks "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" your patch is\n+longer than a dozen lines.\n\n If you are starting to work on a particular area, feel "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v(" to submit a PR\n that highlights your work "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" progress "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("and note "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the PR title that it's\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("font",{attrs:{color:"blue"}},[s._v("若要查看"),a("strong",[s._v("已暂存的")]),s._v("将要添加到下次提交里的内容，可以用 "),a("code",[s._v("git diff --cached")]),s._v(" 命令")]),s._v("。（Git 1.6.1 及更高版本还允许使用 "),a("strong",[a("code",[s._v("git diff --staged")])]),s._v("，效果是相同的，但更好记些。）")],1),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" --staged\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" --git a/README b/README\nnew "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" mode "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100644")]),s._v("\nindex 0000000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("03902a1\n--- /dev/null\n+++ b/README\n@@ -0,0 +1 @@\n+My Project\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("blockquote",[a("p",[s._v("我们使用 "),a("code",[s._v("git diff")]),s._v(" 来分析文件差异。 但是，如果你喜欢通过"),a("strong",[s._v("图形化的方式")]),s._v("或其它格式输出方式的话，可以使用 "),a("strong",[a("code",[s._v("git difftool")])]),s._v(" 命令来用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果。 使用 "),a("code",[s._v("git difftool --tool-help")]),s._v(" 命令来看你的系统支持哪些 Git Diff 插件。")])]),s._v(" "),a("h3",{attrs:{id:"_4-7-提交更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-提交更新"}},[s._v("#")]),s._v(" 4.7 提交更新")]),s._v(" "),a("p",[s._v("每次准备提交前，先用 "),a("code",[s._v("git status")]),s._v(" 看下，是不是都已暂存起来了， 然后再运行提交命令 "),a("code",[s._v("git commit")]),s._v("。")]),s._v(" "),a("p",[s._v("提交时会出现一个编辑器来输入"),a("strong",[s._v("提交说明")]),s._v("。也可以使用 "),a("code",[s._v("-m")]),s._v(" 选项来将提交信息与命令放在同一行：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Story 182: Fix benchmarks for speed"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("master 463dc4f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Story "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("182")]),s._v(": Fix benchmarks "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" speed\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" files changed, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" insertions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n create mode "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100644")]),s._v(" README\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("可以看到当前是在哪个分支（"),a("code",[s._v("master")]),s._v("）提交的，本次提交的完整 SHA-1 校验和是什么（"),a("code",[s._v("463dc4f")]),s._v("），以及在本次提交中，有多少文件修订过，多少行添加和删改过。")])]),s._v(" "),a("p",[a("strong",[s._v("请记住，提交时记录的是放在暂存区域的快照")]),s._v("。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。")]),s._v(" "),a("p",[s._v("有人可能觉得使用暂存区域的方式略显繁琐，可以在提交的时候，给 "),a("code",[s._v("git commit")]),s._v(" 加上 "),a("code",[s._v("-a")]),s._v(" 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 "),a("code",[s._v("git add")]),s._v(" 步骤。")]),s._v(" "),a("h3",{attrs:{id:"_4-8-移除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-移除文件"}},[s._v("#")]),s._v(" 4.8 移除文件")]),s._v(" "),a("p",[s._v("要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。")]),s._v(" "),a("p",[a("code",[s._v("git rm")]),s._v(" 会将文件从已跟踪文件清单和工作目录中一同删除。")]),s._v(" "),a("p",[s._v("如果只是简单地从工作目录中手工删除文件，运行 "),a("code",[s._v("git status")]),s._v(" 时就会在 “Changes not staged for commit” 部分，即本次删除操作并没有被暂存，这样之后还得再运行一次 "),a("code",[s._v("git add/rm")]),s._v(" 命令。")]),s._v(" "),a("p",[s._v("另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 "),a("code",[s._v(".gitignore")]),s._v(" 文件，不小心把一个很大的日志文件或一堆 "),a("code",[s._v(".a")]),s._v(" 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 "),a("code",[s._v("--cached")]),s._v(" 选项：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" --cached README\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("git rm")]),s._v(" 命令后面可以列出文件或者目录的名字，也可以使用 "),a("code",[s._v("glob")]),s._v(" 模式，如 "),a("code",[s._v("git rm \\*~")])])]),s._v(" "),a("h3",{attrs:{id:"_4-9-移动文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-移动文件"}},[s._v("#")]),s._v(" 4.9 移动文件")]),s._v(" "),a("p",[s._v("Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。")]),s._v(" "),a("p",[s._v("要在 Git 中对文件改名，可以用移动命令 "),a("code",[s._v("mv")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" file_from file_to\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" README.md README\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status\nOn branch master\nChanges to be committed:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git reset HEAD <file>..."')]),s._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    renamed:    README.md -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" README\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("其实，运行 "),a("code",[s._v("git mv")]),s._v(" 就相当于运行了下面三条命令：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" README.md README\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" README.md\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" README\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。")]),s._v(" "),a("h2",{attrs:{id:"_5-查看提交历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-查看提交历史"}},[s._v("#")]),s._v(" 5. 查看提交历史")])])}),[],!1,null,null,null);t.default=n.exports}}]);