(window.webpackJsonp=window.webpackJsonp||[]).push([[321],{1094:function(t,s,a){"use strict";a.r(s);var n=a(22),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("这一章的主要目的是使用 "),a("code",[t._v("socket")]),t._v(" 函数来创建套接字：")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("socket 函数")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("domain：套接字使用的协议族信息")]),t._v(" "),a("li",[t._v("type：套接字数据传输类型信息")]),t._v(" "),a("li",[t._v("protocol：计算机间通信中使用的协议信息")])]),t._v(" "),a("p",[t._v("成功时返回文件描述符，失败时返回 -1")])]),t._v(" "),a("h2",{attrs:{id:"_2-套接字协议及其数据传输特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-套接字协议及其数据传输特性"}},[t._v("#")]),t._v(" 2. 套接字协议及其数据传输特性")]),t._v(" "),a("h3",{attrs:{id:"_2-1-协议族-protocol-family"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-协议族-protocol-family"}},[t._v("#")]),t._v(" 2.1 协议族（Protocol Family）")]),t._v(" "),a("p",[t._v("套接字通信中的协议具有一些分类，通过 socket 函数的第一个参数传递套接字中使用的协议分类信息。此分类信息称为 "),a("mark",[t._v("协议族")]),t._v("，分为如下：")]),t._v(" "),a("p",[t._v("头文件 "),a("code",[t._v("sys/socket.h")]),t._v(" 中声明的协议族")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("协议族")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("PF_INET")]),t._v(" "),a("td",[t._v("IPV4 互联网协议族")])]),t._v(" "),a("tr",[a("td",[t._v("PF_INET6")]),t._v(" "),a("td",[t._v("IPV6 互联网协议族")])]),t._v(" "),a("tr",[a("td",[t._v("PF_LOCAL")]),t._v(" "),a("td",[t._v("本地通信 Unix 协议族")])]),t._v(" "),a("tr",[a("td",[t._v("PF_PACKET")]),t._v(" "),a("td",[t._v("底层套接字的协议族")])]),t._v(" "),a("tr",[a("td",[t._v("PF_IPX")]),t._v(" "),a("td",[t._v("IPX Novel 协议族")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-2-套接字类型-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-套接字类型-type"}},[t._v("#")]),t._v(" 2.2 套接字类型（Type）")]),t._v(" "),a("p",[t._v("套接字类型指的是套接字的"),a("strong",[t._v("数据传输方式")]),t._v("，是通过 socket 函数的第二个参数进行传递。")]),t._v(" "),a("p",[t._v("之所以需要这个参数，是因为 PF_INET 协议族里存在多种数据传输方式。")]),t._v(" "),a("h4",{attrs:{id:"_1-socket-type-1-面向连接的套接字-sock-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-socket-type-1-面向连接的套接字-sock-stream"}},[t._v("#")]),t._v(" 1）socket type 1：面向连接的套接字（SOCK_STREAM）")]),t._v(" "),a("p",[a("code",[t._v("SOCK_STREAM")]),t._v("：创建面向连接的套接字")]),t._v(" "),a("p",[t._v("传输方式特征整理如下：")]),t._v(" "),a("ul",[a("li",[t._v("传输过程中数据不会消失")]),t._v(" "),a("li",[t._v("按序传输数据")]),t._v(" "),a("li",[t._v("传输的数据不存在数据边界（Boundary）")])]),t._v(" "),a("p",[t._v("套接字在收发数据时内部有一个 buffer，可能存在三次接收的数据存在 buffer 中，通过一次 read 就全部读出来，所以说不存在数据边界。接收方 buffer 如果被填满，则发送方会停止发送，不会因此发生数据丢失。")]),t._v(" "),a("p",[t._v("这种套接字连接时发送方和接收方必须一一对应，因此面向连接的套接字可以总结为：")]),t._v(" "),a("p",[a("strong",[t._v("可靠地、按序传递的、基于字节的面向连接的数据传输方式的套接字")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_2-socket-type-2-面向消息的套接字-sock-dgram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-socket-type-2-面向消息的套接字-sock-dgram"}},[t._v("#")]),t._v(" 2）socket type 2：面向消息的套接字（SOCK_DGRAM）")]),t._v(" "),a("p",[a("code",[t._v("SOCK_DGRAM")]),t._v("：创建面向消息的套接字。特点如下：")]),t._v(" "),a("ul",[a("li",[t._v("强调快速传输而非传输有序")]),t._v(" "),a("li",[t._v("传输的数据可能丢失也可能损毁")]),t._v(" "),a("li",[t._v("传输的数据有边界")]),t._v(" "),a("li",[t._v("限制每次传输数据的大小")])]),t._v(" "),a("p",[t._v("相比面向连接的套接字，面向消息的套接字更具传输速度，但可能丢失，特点总结为：")]),t._v(" "),a("p",[a("strong",[t._v("不可靠的、不按序传递的、以数据的高速传输为目的套接字")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-协议的最终选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-协议的最终选择"}},[t._v("#")]),t._v(" 2.3 协议的最终选择")]),t._v(" "),a("p",[t._v("socket 函数的第三个参数决定最终采用的协议。")]),t._v(" "),a("p",[t._v("有了前面两个，为什么还需要这个参数呢？如果前两个参数可以唯一确定一个协议，那这个参数传递 0 即可。除非遇到“同一协议族中存在多个数据传输方式相同的协议”的情况，才需要指定第三个参数。")]),t._v(" "),a("p",[t._v("“IPv4 协议族”和“面向连接的数据传输”，满足这两个条件的协议只有 IPPROTO_TCP，因此可以使用如下代码创建 "),a("mark",[t._v("TCP 套接字")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tcp_socket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_STREAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" IPPROTO_TCP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tcp_socket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_STREAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("SOCK_DGRAM 指的是面向消息的数据传输方式，满足上述条件的协议只有 IPPROTO_UDP，可以使用如下代码创建 "),a("mark",[t._v("UDP 套接字")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" udp_socket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_DGRAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" IPPROTO_UDP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" udp_socket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_DGRAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("本章主要介绍了 "),a("code",[t._v("socket")]),t._v(" 函数，使用示例如下：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nsock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOCK_STREAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error_handling")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"socket() error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);